<?xml version="1.0" encoding="UTF-8"?><chapter id="chap_JBossWS-NativeWS-ReliableMessagingTutorial"><title>JBossWS-NativeWS-ReliableMessagingTutorial</title><para>JBossWS-Native comes with support for both <ulink url="http://specs.xmlsoap.org/ws/2005/02/rm/ws-reliablemessaging.pdf">WS-RM 1.0</ulink> and <ulink url="http://docs.oasis-open.org/ws-rx/wsrm/v1.1/wsrm.pdf">WS-RM 1.1</ulink>. In this sample we will show how to create client and endpoint communicating each other using WS-RM 1.1 The sample uses <ulink url="http://schemas.xmlsoap.org/ws/2004/09/policy/">WS-Policy</ulink> specification to configure WS-RM.</para><para>Creating the WS-RM based service and client is very simple. User needs to create regular JAX-WS service and client first. The last step is to configure WSRM.</para><para/><para> </para><section id="JBossWS-NativeWS-ReliableMessagingTutorial_The_service"><title>The service</title><para>We will start with the following endpoint implementation (bottom-up approach):</para><screen xml:space="preserve"><emphasis role="bold">package</emphasis> org.jboss.test.ws.jaxws.samples.wsrm.service;
 
<emphasis role="bold">import</emphasis> javax.jws.Oneway;
<emphasis role="bold">import</emphasis> javax.jws.WebMethod;
<emphasis role="bold">import</emphasis> javax.jws.WebService;
 
@WebService
(
   name = "SimpleService",
   serviceName = "SimpleService",
   wsdlLocation = "WEB-INF/wsdl/SimpleService.wsdl"
   targetNamespace = "http://www.jboss.org/jbossws/ws-extensions/wsrm"
)
<emphasis role="bold">public</emphasis> <emphasis role="bold">class</emphasis> SimpleServiceImpl
{
   @Oneway
   @WebMethod
   <emphasis role="bold">public</emphasis> <emphasis role="bold">void</emphasis> ping()
   {
      System.out.println("ping()");
   }
 
   @WebMethod
   <emphasis role="bold">public</emphasis> String echo(String s)
   {
      System.out.println("echo(" + s + ")");
      <emphasis role="bold">return</emphasis> s;
   }
}
</screen><para>Let's say that compiled endpoint class is in directory <emphasis role="bold">/home/username/wsrm/native/classes</emphasis>. Our next step is to generate JAX-WS artifacts and WSDL.</para><para> </para></section>
<section id="JBossWS-NativeWS-ReliableMessagingTutorial_Generating_WSDL_and_JAXWS_Endpoint_Artifacts"><title>Generating WSDL and JAX-WS Endpoint Artifacts</title><para>We will use wsprovide commandline tool to generate WSDL and JAX-WS artifacts. Here's the command:</para><screen xml:space="preserve">cd $JBOSS_HOME/bin

./wsprovide.sh --keep --wsdl \
   --classpath=/home/username/wsrm/native/classes \
   --output=/home/username/wsrm/native/wsprovide/generated/classes \
   --resource=/home/username/wsrm/native/wsprovide/generated/wsdl \
   --source=/home/username/wsrm/native/wsprovide/generated/src \
   org.jboss.test.ws.jaxws.samples.wsrm.service.SimpleServiceImpl
</screen><para>The above command generates the following artifacts:</para><screen xml:space="preserve"># compiled classes
ls /home/username/wsrm/native/wsprovide/generated/classes/org/jboss/test/ws/jaxws/samples/wsrm/service/jaxws/
Echo.class  EchoResponse.class  Ping.class

# java sources
ls /home/username/wsrm/native/wsprovide/generated/src/org/jboss/test/ws/jaxws/samples/wsrm/service/jaxws/
Echo.java EchoResponse.java Ping.java

# contract artifacts
ls /home/username/wsrm/native/wsprovide/generated/wsdl/
SimpleService.wsdl
</screen><para>All aforementioned generated artifacts will be part of endpoint archive. The endpoint archive consists of the following files:</para><screen xml:space="preserve">jar -tvf jaxws-samples-wsrm.war 
     0 Tue Apr 15 19:06:14 CEST 2008 META-INF/
   106 Tue Apr 15 19:06:12 CEST 2008 META-INF/MANIFEST.MF
     0 Tue Apr 15 19:06:14 CEST 2008 WEB-INF/
   591 Tue Apr 15 19:05:42 CEST 2008 WEB-INF/web.xml
     0 Tue Apr 15 19:06:14 CEST 2008 WEB-INF/classes/
     0 Tue Apr 15 19:04:50 CEST 2008 WEB-INF/classes/org/
     0 Tue Apr 15 19:04:50 CEST 2008 WEB-INF/classes/org/jboss/
     0 Tue Apr 15 19:04:50 CEST 2008 WEB-INF/classes/org/jboss/test/
     0 Tue Apr 15 19:05:10 CEST 2008 WEB-INF/classes/org/jboss/test/ws/
     0 Tue Apr 15 19:05:10 CEST 2008 WEB-INF/classes/org/jboss/test/ws/jaxws/
     0 Tue Apr 15 19:05:10 CEST 2008 WEB-INF/classes/org/jboss/test/ws/jaxws/samples/
     0 Tue Apr 15 19:05:10 CEST 2008 WEB-INF/classes/org/jboss/test/ws/jaxws/samples/wsrm/
     0 Tue Apr 15 19:05:10 CEST 2008 WEB-INF/classes/org/jboss/test/ws/jaxws/samples/wsrm/service/
     0 Tue Apr 15 19:05:10 CEST 2008 WEB-INF/classes/org/jboss/test/ws/jaxws/samples/wsrm/service/jaxws/
  1385 Tue Apr 15 19:05:10 CEST 2008 WEB-INF/classes/org/jboss/test/ws/jaxws/samples/wsrm/service/SimpleServiceImpl.class
   995 Tue Apr 15 19:05:10 CEST 2008 WEB-INF/classes/org/jboss/test/ws/jaxws/samples/wsrm/service/jaxws/Echo.class
  1043 Tue Apr 15 19:05:10 CEST 2008 WEB-INF/classes/org/jboss/test/ws/jaxws/samples/wsrm/service/jaxws/EchoResponse.class
   679 Tue Apr 15 19:05:10 CEST 2008 WEB-INF/classes/org/jboss/test/ws/jaxws/samples/wsrm/service/jaxws/Ping.class
     0 Tue Apr 15 19:06:14 CEST 2008 WEB-INF/wsdl/
  2934 Tue Apr 15 19:05:36 CEST 2008 WEB-INF/wsdl/SimpleService.wsdl
</screen><para>The content of web.xml file is:</para><screen xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app
   version="2.5" xmlns="<ulink url="http://java.sun.com/xml/ns/javaee">http://java.sun.com/xml/ns/javaee</ulink>" 
   xmlns:xsi="<ulink url="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</ulink>" 
   xsi:schemaLocation="<ulink url="http://java.sun.com/xml/ns/javaee">http://java.sun.com/xml/ns/javaee</ulink> <ulink url="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd</ulink>"&gt;
   &lt;servlet&gt;
      &lt;servlet-name&gt;SimpleService&lt;/servlet-name&gt;
      &lt;servlet-class&gt;org.jboss.test.ws.jaxws.samples.wsrm.service.SimpleServiceImpl&lt;/servlet-class&gt;
   &lt;/servlet&gt;
   &lt;servlet-mapping&gt;
      &lt;servlet-name&gt;SimpleService&lt;/servlet-name&gt;
      &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
   &lt;/servlet-mapping&gt;
&lt;/web-app&gt;</screen></section>
<section id="JBossWS-NativeWS-ReliableMessagingTutorial_Generating_JAXWS_Client_Artifacts"><title>Generating JAX-WS Client Artifacts</title><para>Before we will write regular JAX-WS client we need to generate client artifacts from WSDL. Here's the command to achieve that:</para><screen xml:space="preserve">cd $JBOSS_HOME

./wsconsume.sh --keep \
   --package=org.jboss.test.ws.jaxws.samples.wsrm.generated \
   --output=/home/username/wsrm/native/wsconsume/generated/classes \
   --source=/home/username/wsrm/native/wsconsume/generated/src \
   /home/username/wsrm/native/wsprovide/generated/wsdl/SimpleService.wsdl
</screen><para>The above command generates the following artifacts:</para><screen xml:space="preserve"># compiled classes
ls /home/username/wsrm/native/wsconsume/generated/classes/org/jboss/test/ws/jaxws/samples/wsrm/generated/
Echo.class  EchoResponse.class  ObjectFactory.class  package-info.class  Ping.class  SimpleService.class  SimpleService_Service.class

# java sources
ls /home/username/wsrm/native/wsconsume/generated/src/org/jboss/test/ws/jaxws/samples/wsrm/generated/
Echo.java  EchoResponse.java  ObjectFactory.java  package-info.java  Ping.java  SimpleService.java  SimpleService_Service.java
</screen><para>Now the last step is to write the regular JAX-WS client using generated artifacts.</para><para> </para></section>
<section id="JBossWS-NativeWS-ReliableMessagingTutorial_Writing_Regular_JAXWS_Client"><title>Writing Regular JAX-WS Client</title><para>The following is the regular JAX-WS client using generated artifacts:</para><screen xml:space="preserve"><emphasis role="bold">package</emphasis> org.jboss.test.ws.jaxws.samples.wsrm.client;
 
<emphasis role="bold">import</emphasis> java.net.URL;
<emphasis role="bold">import</emphasis> javax.xml.namespace.QName;
<emphasis role="bold">import</emphasis> javax.xml.ws.Service;
<emphasis role="bold">import</emphasis> org.jboss.test.ws.jaxws.samples.wsrm.generated.SimpleService;
 
<emphasis role="bold">public</emphasis> <emphasis role="bold">final</emphasis> <emphasis role="bold">class</emphasis> SimpleServiceTestCase
{
 
   <emphasis role="bold">private</emphasis> <emphasis role="bold">static</emphasis> <emphasis role="bold">final</emphasis> String serviceURL = "http://localhost:8080/jaxws-samples-wsrm/SimpleService";
   
   <emphasis role="bold">public</emphasis> <emphasis role="bold">static</emphasis> <emphasis role="bold">void</emphasis> main(String[] args) <emphasis role="bold">throws</emphasis> Exception
   {
      QName serviceName = <emphasis role="bold">new</emphasis> QName("http://www.jboss.org/jbossws/ws-extensions/wsrm", "SimpleService");
      URL wsdlURL = <emphasis role="bold">new</emphasis> URL(serviceURL + "?wsdl");
      Service service = Service.create(wsdlURL, serviceName);
      SimpleService proxy = (SimpleService)service.getPort(SimpleService.class);
      
      proxy.ping(); // one way call
      proxy.echo("Hello World!"); // request responce call
   }
   
}
</screen><para>Now we have both endpoint and client implementation but without WSRM in place. Our next goal is to turn on WS-RM feature.</para><para> </para></section>
<section id="JBossWS-NativeWS-ReliableMessagingTutorial_Turning_on_WSRM_11"><title>Turning on WS-RM 1.1</title><para>In order to turn on WS-RM in JBossWS-Native four steps are necessary:</para><itemizedlist><listitem><para> extend WSDL with WS-Policy containing both WSRM and WS-Addressing policy </para></listitem><listitem><para> provide both endpoint and client jaxws configuration files </para></listitem><listitem><para> update endpoint implementation to use endpoint jaxws file </para></listitem><listitem><para> update client to use client jaxws file and close the sequence</para></listitem></itemizedlist><para> </para><para> </para><section id="JBossWS-NativeWS-ReliableMessagingTutorial_Extending_WSDL_Using_WSPolicy"><title>Extending WSDL Using WS-Policy</title><para>To activate WSRM we need to extend WSDL with WSRM and addressing policy. Here is how it looks like:</para><screen xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;definitions name='SimpleService' targetNamespace='<ulink url="http://www.jboss.org/jbossws/ws-extensions/wsrm">http://www.jboss.org/jbossws/ws-extensions/wsrm</ulink>' xmlns='<ulink url="http://schemas.xmlsoap.org/wsdl/">http://schemas.xmlsoap.org/wsdl/</ulink>' xmlns:soap='<ulink url="http://schemas.xmlsoap.org/wsdl/soap/">http://schemas.xmlsoap.org/wsdl/soap/</ulink>' xmlns:tns='<ulink url="http://www.jboss.org/jbossws/ws-extensions/wsrm">http://www.jboss.org/jbossws/ws-extensions/wsrm</ulink>' xmlns:xsd='<ulink url="http://www.w3.org/2001/XMLSchema">http://www.w3.org/2001/XMLSchema</ulink>' xmlns:wsp="<ulink url="http://schemas.xmlsoap.org/ws/2004/09/policy">http://schemas.xmlsoap.org/ws/2004/09/policy</ulink>"&gt;
  &lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - --&gt;
  &lt;!-- Created WS-Policy with WSRM addressing assertions --&gt;
  &lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - --&gt;
  &lt;wsp:UsingPolicy/&gt;
  &lt;wsp:Policy
    wsu:Id="wsrm11policy"
    xmlns:wsu="<ulink url="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd</ulink>"&gt;
    &lt;wsp:All&gt;
      &lt;wsp:ExactlyOne&gt;
         &lt;wsp:All&gt;
            &lt;ns1:RMAssertion xmlns:ns1="<ulink url="http://docs.oasis-open.org/ws-rx/wsrmp/200702">http://docs.oasis-open.org/ws-rx/wsrmp/200702</ulink>"/&gt;
            &lt;ns2:UsingAddressing xmlns:ns2="<ulink url="http://www.w3.org/2006/05/addressing/wsdl">http://www.w3.org/2006/05/addressing/wsdl</ulink>"/&gt;
         &lt;/wsp:All&gt;
      &lt;/wsp:ExactlyOne&gt;
    &lt;/wsp:All&gt;
  &lt;/wsp:Policy&gt;&lt;types&gt;
  &lt;xs:schema targetNamespace='<ulink url="http://www.jboss.org/jbossws/ws-extensions/wsrm">http://www.jboss.org/jbossws/ws-extensions/wsrm</ulink>' version='1.0' xmlns:tns='<ulink url="http://www.jboss.org/jbossws/ws-extensions/wsrm">http://www.jboss.org/jbossws/ws-extensions/wsrm</ulink>' xmlns:xs='<ulink url="http://www.w3.org/2001/XMLSchema">http://www.w3.org/2001/XMLSchema</ulink>'&gt;
   &lt;xs:element name='echo' type='tns:echo'/&gt;
   &lt;xs:element name='echoResponse' type='tns:echoResponse'/&gt;
   &lt;xs:element name='ping' type='tns:ping'/&gt;
   &lt;xs:complexType name='ping'&gt;
    &lt;xs:sequence/&gt;
   &lt;/xs:complexType&gt;
   &lt;xs:complexType name='echo'&gt;
    &lt;xs:sequence&gt;
     &lt;xs:element minOccurs='0' name='arg0' type='xs:string'/&gt;
    &lt;/xs:sequence&gt;
   &lt;/xs:complexType&gt;
   &lt;xs:complexType name='echoResponse'&gt;
    &lt;xs:sequence&gt;
     &lt;xs:element minOccurs='0' name='return' type='xs:string'/&gt;
    &lt;/xs:sequence&gt;
   &lt;/xs:complexType&gt;
  &lt;/xs:schema&gt;&lt;/types&gt;&lt;message name='SimpleService_echo'&gt;
  &lt;part element='tns:echo' name='echo'/&gt;&lt;/message&gt;&lt;message name='SimpleService_echoResponse'&gt;
  &lt;part element='tns:echoResponse' name='echoResponse'/&gt;&lt;/message&gt;&lt;message name='SimpleService_ping'&gt;
  &lt;part element='tns:ping' name='ping'/&gt;&lt;/message&gt;&lt;portType name='SimpleService'&gt;
  &lt;operation name='echo' parameterOrder='echo'&gt;
   &lt;input message='tns:SimpleService_echo'/&gt;
   &lt;output message='tns:SimpleService_echoResponse'/&gt;
  &lt;/operation&gt;
  &lt;operation name='ping'&gt;
   &lt;input message='tns:SimpleService_ping'/&gt;
  &lt;/operation&gt;&lt;/portType&gt;&lt;binding name='SimpleServiceBinding' type='tns:SimpleService'&gt;
  &lt;!-- - - - - - - - - - - - - - - - - - - - --&gt;
  &lt;!-- Associated WS-Policy with the binding --&gt;
  &lt;!-- - - - - - - - - - - - - - - - - - - - --&gt;
  &lt;wsp:PolicyReference URI="#wsrm11policy"/&gt;
  &lt;soap:binding style='document' transport='<ulink url="http://schemas.xmlsoap.org/soap/http'/">http://schemas.xmlsoap.org/soap/http'/</ulink>&gt;
  &lt;operation name='echo'&gt;
   &lt;soap:operation soapAction=''/&gt;
   &lt;input&gt;
    &lt;soap:body use='literal'/&gt;
   &lt;/input&gt;
   &lt;output&gt;
    &lt;soap:body use='literal'/&gt;
   &lt;/output&gt;
  &lt;/operation&gt;
  &lt;operation name='ping'&gt;
   &lt;soap:operation soapAction=''/&gt;
   &lt;input&gt;
    &lt;soap:body use='literal'/&gt;
   &lt;/input&gt;
  &lt;/operation&gt;&lt;/binding&gt;&lt;service name='SimpleService'&gt;
  &lt;port binding='tns:SimpleServiceBinding' name='SimpleServicePort'&gt;
   &lt;soap:address location='REPLACE_WITH_ACTUAL_URL'/&gt;
  &lt;/port&gt;&lt;/service&gt;
&lt;/definitions&gt;
</screen><para>We added <emphasis role="bold">wsp:UsingPolicy</emphasis>, <emphasis role="bold">wsp:Policy</emphasis> and <emphasis role="bold">wsp:PolicyReference</emphasis> elements to WSDL.</para><para> </para></section>
<section id="JBossWS-NativeWS-ReliableMessagingTutorial_Providing_Endpoint_and_Client_JAXWS_Configuration_Files"><title>Providing Endpoint and Client JAX-WS Configuration Files</title><para>In order to activate WSRM in JBossWS-Native integration user have to provide both endpoint and client jaxws configuration files containing both addressing and WSRM handlers in the processing chain.</para><para>The endpoint jaxws configuration file, in our case we will call it <emphasis role="bold">wsrm-jaxws-endpoint-config.xml</emphasis> has the following content:</para><screen xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;jaxws-config
  xmlns="urn:jboss:jaxws-config:2.0"
  xmlns:xsi="<ulink url="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</ulink>"
  xmlns:javaee="<ulink url="http://java.sun.com/xml/ns/javaee">http://java.sun.com/xml/ns/javaee</ulink>"
  xsi:schemaLocation="urn:jboss:jaxws-config:2.0 jaxws-config_2_0.xsd"&gt;

  &lt;endpoint-config&gt;
    &lt;config-name&gt;Standard WSRM Endpoint&lt;/config-name&gt;
    &lt;post-handler-chains&gt;
      &lt;javaee:handler-chain&gt;
        &lt;javaee:protocol-bindings&gt;##SOAP11_HTTP&lt;/javaee:protocol-bindings&gt;
        &lt;javaee:handler&gt;
          &lt;javaee:handler-name&gt;WSAddressing Handler&lt;/javaee:handler-name&gt;
          &lt;javaee:handler-class&gt;org.jboss.ws.extensions.addressing.jaxws.WSAddressingServerHandler&lt;/javaee:handler-class&gt;
        &lt;/javaee:handler&gt;
        &lt;javaee:handler&gt;
          &lt;javaee:handler-name&gt;WSRM Handler&lt;/javaee:handler-name&gt;
          &lt;javaee:handler-class&gt;org.jboss.ws.extensions.wsrm.jaxws.RMServerHandler&lt;/javaee:handler-class&gt;
        &lt;/javaee:handler&gt;
      &lt;/javaee:handler-chain&gt;
    &lt;/post-handler-chains&gt;
  &lt;/endpoint-config&gt;&lt;/jaxws-config&gt;
</screen><para>The client jaxws configuration file, in our case we will call it <emphasis role="bold">wsrm-jaxws-client-config.xml</emphasis> has the following content:</para><screen xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;jaxws-config
  xmlns="urn:jboss:jaxws-config:2.0"
  xmlns:xsi="<ulink url="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</ulink>"
  xmlns:javaee="<ulink url="http://java.sun.com/xml/ns/javaee">http://java.sun.com/xml/ns/javaee</ulink>"
  xsi:schemaLocation="urn:jboss:jaxws-config:2.0 jaxws-config_2_0.xsd"&gt;

  &lt;client-config&gt;
    &lt;config-name&gt;Standard Anonymous WSRM Client&lt;/config-name&gt;
    &lt;reliable-messaging&gt;
      &lt;message-retransmission attempts="50" interval="10" timeout="10"/&gt;
    &lt;/reliable-messaging&gt;     
    &lt;post-handler-chains&gt;
      &lt;javaee:handler-chain&gt;
        &lt;javaee:protocol-bindings&gt;##SOAP11_HTTP&lt;/javaee:protocol-bindings&gt;
        &lt;javaee:handler&gt;
          &lt;javaee:handler-name&gt;WSAddressing Handler&lt;/javaee:handler-name&gt;
          &lt;javaee:handler-class&gt;org.jboss.ws.extensions.addressing.jaxws.WSAddressingClientHandler&lt;/javaee:handler-class&gt;
        &lt;/javaee:handler&gt;
        &lt;javaee:handler&gt;
          &lt;javaee:handler-name&gt;WSRM Handler&lt;/javaee:handler-name&gt;
          &lt;javaee:handler-class&gt;org.jboss.ws.extensions.wsrm.jaxws.RMClientHandler&lt;/javaee:handler-class&gt;
        &lt;/javaee:handler&gt;
      &lt;/javaee:handler-chain&gt;
    &lt;/post-handler-chains&gt;
  &lt;/client-config&gt;&lt;/jaxws-config&gt;
</screen><note><para><para><emphasis><emphasis role="bold">Note</emphasis></emphasis></para><para><emphasis>Both client and endpoint jaxws configuration files are available in native WSRM tests. Users can copy them from there.</emphasis></para></para></note><para>The next step is to include jaxws endpoint configuration file in META-INF directory of the endpoint archive.</para><screen xml:space="preserve">jar -tvf jaxws-samples-wsrm.war 
     0 Tue Apr 15 19:06:14 CEST 2008 META-INF/
   106 Tue Apr 15 19:06:12 CEST 2008 META-INF/MANIFEST.MF
     0 Tue Apr 15 19:06:14 CEST 2008 WEB-INF/
   591 Tue Apr 15 19:05:42 CEST 2008 WEB-INF/web.xml
     0 Tue Apr 15 19:06:14 CEST 2008 WEB-INF/classes/
     0 Tue Apr 15 19:04:50 CEST 2008 WEB-INF/classes/org/
     0 Tue Apr 15 19:04:50 CEST 2008 WEB-INF/classes/org/jboss/
     0 Tue Apr 15 19:04:50 CEST 2008 WEB-INF/classes/org/jboss/test/
     0 Tue Apr 15 19:05:10 CEST 2008 WEB-INF/classes/org/jboss/test/ws/
     0 Tue Apr 15 19:05:10 CEST 2008 WEB-INF/classes/org/jboss/test/ws/jaxws/
     0 Tue Apr 15 19:05:10 CEST 2008 WEB-INF/classes/org/jboss/test/ws/jaxws/samples/
     0 Tue Apr 15 19:05:10 CEST 2008 WEB-INF/classes/org/jboss/test/ws/jaxws/samples/wsrm/
     0 Tue Apr 15 19:05:10 CEST 2008 WEB-INF/classes/org/jboss/test/ws/jaxws/samples/wsrm/service/
     0 Tue Apr 15 19:05:10 CEST 2008 WEB-INF/classes/org/jboss/test/ws/jaxws/samples/wsrm/service/jaxws/
  1385 Tue Apr 15 19:05:10 CEST 2008 WEB-INF/classes/org/jboss/test/ws/jaxws/samples/wsrm/service/SimpleServiceImpl.class
   995 Tue Apr 15 19:05:10 CEST 2008 WEB-INF/classes/org/jboss/test/ws/jaxws/samples/wsrm/service/jaxws/Echo.class
  1043 Tue Apr 15 19:05:10 CEST 2008 WEB-INF/classes/org/jboss/test/ws/jaxws/samples/wsrm/service/jaxws/EchoResponse.class
   679 Tue Apr 15 19:05:10 CEST 2008 WEB-INF/classes/org/jboss/test/ws/jaxws/samples/wsrm/service/jaxws/Ping.class
     0 Tue Apr 15 19:06:14 CEST 2008 WEB-INF/wsdl/
  2934 Tue Apr 15 19:05:36 CEST 2008 WEB-INF/wsdl/SimpleService.wsdl
  2033 Tue Apr 15 19:05:52 CEST 2008 META-INF/wsrm-jaxws-endpoint-config.xml
</screen><para>What about client side, the client jaxws configuration file must be available on the client classpath, in our case it will be available as <emphasis role="bold">META-INF/wsrm-jaxws-client-config.xml</emphasis> resource.</para><para> </para></section>
<section id="JBossWS-NativeWS-ReliableMessagingTutorial_Updating_Endpoint_Code_to_Reference_Custom_JAXWS_Config_File"><title>Updating Endpoint Code to Reference Custom JAX-WS Config File</title><para>Now we need to update endpoint implementation to reference custom JAX-WS configuration file. Here's the updated endpoint code:</para><screen xml:space="preserve"><emphasis role="bold">package</emphasis> org.jboss.test.ws.jaxws.samples.wsrm.service;
 
<emphasis role="bold">import</emphasis> javax.jws.Oneway;
<emphasis role="bold">import</emphasis> javax.jws.WebMethod;
<emphasis role="bold">import</emphasis> javax.jws.WebService;
 
<emphasis role="bold">import</emphasis> org.jboss.ws.annotation.EndpointConfig;
 
@WebService
(
   name = "SimpleService",
   serviceName = "SimpleService",
   wsdlLocation = "WEB-INF/wsdl/SimpleService.wsdl",
   targetNamespace = "http://www.jboss.org/jbossws/ws-extensions/wsrm"
)
@EndpointConfig
(
   configFile = "META-INF/wsrm-jaxws-endpoint-config.xml",
   configName = "Standard WSRM Endpoint"
)
<emphasis role="bold">public</emphasis> <emphasis role="bold">class</emphasis> SimpleServiceImpl
{
   @Oneway
   @WebMethod
   <emphasis role="bold">public</emphasis> <emphasis role="bold">void</emphasis> ping()
   {
      System.out.println("ping()");
   }
 
   @WebMethod
   <emphasis role="bold">public</emphasis> String echo(String s)
   {
      System.out.println("echo(" + s + ")");
      <emphasis role="bold">return</emphasis> s;
   }
}
</screen><para>As users can see we added JBossWS proprietary <emphasis role="bold">EndpointConfig</emphasis> annotation to reference the endpoint config.</para><para> </para></section>
<section id="JBossWS-NativeWS-ReliableMessagingTutorial_Updating_Client_Code_to_Reference_Custom_JAXWS_Config_File_and_Close_the_Sequence"><title>Updating Client Code to Reference Custom JAX-WS Config File and Close the Sequence</title><para>Now we need to update client implementation as well to reference custom JAX-WS configuration file. We will also add the call to close the created sequence there. Here's the updated client code:</para><screen xml:space="preserve"><emphasis role="bold">package</emphasis> org.jboss.test.ws.jaxws.samples.wsrm.client;
 
<emphasis role="bold">import</emphasis> java.net.URL;
<emphasis role="bold">import</emphasis> javax.xml.namespace.QName;
<emphasis role="bold">import</emphasis> javax.xml.ws.Service;
<emphasis role="bold">import</emphasis> org.jboss.ws.core.StubExt;
<emphasis role="bold">import</emphasis> org.jboss.ws.extensions.wsrm.api.RMProvider;
<emphasis role="bold">import</emphasis> org.jboss.test.ws.jaxws.samples.wsrm.generated.SimpleService;
 
<emphasis role="bold">public</emphasis> <emphasis role="bold">final</emphasis> <emphasis role="bold">class</emphasis> SimpleServiceTestCase
{
 
   <emphasis role="bold">private</emphasis> <emphasis role="bold">static</emphasis> <emphasis role="bold">final</emphasis> String serviceURL = "http://localhost:8080/jaxws-samples-wsrm/SimpleService";
   
   <emphasis role="bold">public</emphasis> <emphasis role="bold">static</emphasis> <emphasis role="bold">void</emphasis> main(String[] args) <emphasis role="bold">throws</emphasis> Exception
   {
      QName serviceName = <emphasis role="bold">new</emphasis> QName("http://www.jboss.org/jbossws/ws-extensions/wsrm", "SimpleService");
      URL wsdlURL = <emphasis role="bold">new</emphasis> URL(serviceURL + "?wsdl");
      Service service = Service.create(wsdlURL, serviceName);
      SimpleService proxy = (SimpleService)service.getPort(SimpleService.class);
      ((StubExt)proxy).setConfigName("Standard Anonymous WSRM Client", "META-INF/wsrm-jaxws-client-config.xml");
      
      proxy.ping(); // one way call
      proxy.echo("Hello World!"); // request responce call
      ((RMProvider)proxy).closeSequence();
   }
   
}
</screen><para>And that's all. Now user have both endpoint and client using WS-RM 1.1 when communicating each other.</para><para> </para></section>
</section>
<section id="JBossWS-NativeWS-ReliableMessagingTutorial_Sample_Sources"><title>Sample Sources</title><para>All sources from this tutorial are part of JBossWS-Native distribution.</para></section>
</chapter>