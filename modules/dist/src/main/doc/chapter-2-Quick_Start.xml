<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="sid-3735860">
    
    <title>Quick Start</title>
    <para>JBossWS uses the JBoss Application Server as its target container.  The following examples focus on web  service deployments that leverage  EJB3 service implementations and the  JAX-WS programming models. For  further information on POJO service  implementations and advanced topics  you need consult the user guide.</para>
    <section id="sid-3735860_QuickStart-Developingwebserviceimplementations">
      
      <title>Developing web service implementations</title>
      <para>JAX-WS does leverage annotations in order to express web service meta  data on Java components and to  describe the mapping between Java data  types and XML. When developing  web service implementations you need to  decide whether you are going to  start with an abstract contract (WSDL)  or a Java component.</para>
      <para>
        If  you are in charge to provide the service implementation, then you  are  probably going to start with the implementation and derive the  abstract  contract from it. You are probably not even getting in touch  with the  WSDL unless you hand it to 3rd party clients. For this reason  we are  going to look at a service implementation that leverages
        <ulink url="http://www.jcp.org/en/jsr/summary?id=181">JSR-181 annotations</ulink>
        .
      </para>
      <important>
        <para>Even   though detailed knowledge of web service meta data is not required,   it  will definitely help if you make yourself familiar with it.  For   further information see</para>
        <itemizedlist>
          <listitem>
            <para>
              <ulink url="http://www.jcp.org/en/jsr/summary?id=181">Web service meta data (JSR-181)</ulink>
            </para>
          </listitem>
          <listitem>
            <para>
              <ulink url="http://www.jcp.org/en/jsr/summary?id=222">Java API for XML binding (JAXB)</ulink>
            </para>
          </listitem>
          <listitem>
            <para>
              <ulink url="http://www.jcp.org/en/jsr/summary?id=224">Java API for XML-Based Web Services</ulink>
            </para>
          </listitem>
        </itemizedlist>
      </important>
      <section id="sid-3735860_QuickStart-Theserviceimplementationclass">
        
        <title>The service implementation class</title>
        <para>When  starting from Java you must provide the service implementation.  A valid  endpoint implementation class must meet the following  requirements:</para>
        <itemizedlist>
          <listitem>
            <para>
              It
              <emphasis role="italics">must</emphasis>
              carry a
              <code>javax.jws.WebService</code>
              annotation (see JSR 181)
            </para>
          </listitem>
          <listitem>
            <para>
              All method parameters and return types
              <emphasis role="italics">must</emphasis>
              be compatible with the JAXB 2.0
            </para>
          </listitem>
        </itemizedlist>
        <para>Let's look at a sample EJB3 component that is going to be exposed as a web service.</para>
        <para>
          Don't be confused with the EJB3 annotation
          <code>@Stateless</code>
          . We concentrate on the
          <code>@WebService</code>
          annotation for now.
        </para>
        <section id="sid-3735860_QuickStart-Implementingtheservice">
          
          <title>Implementing the service</title>
          <informalexample>
            <programlisting>package org.jboss.test.ws.jaxws.samples.retail.profile;

import javax.ejb.Stateless;
import javax.jws.WebService;
import javax.jws.WebMethod;
import javax.jws.soap.SOAPBinding;

@Stateless                                                             (1)
@WebService(                                                           (2)
   name="ProfileMgmt",
   targetNamespace = "http://org.jboss.ws/samples/retail/profile",
   serviceName = "ProfileMgmtService")
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)         (3)
public class ProfileMgmtBean {

   @WebMethod                                                          (4)
   public DiscountResponse getCustomerDiscount(DiscountRequest request) {
      return new DiscountResponse(request.getCustomer(), 10.00);
   }
}</programlisting>
          </informalexample>
          <informalexample>
            <programlisting>1. We are using a stateless session bean implementation
2. Exposed a web service with an explicit namespace
3. It's a doc/lit bare endpoint
4. And offers an 'getCustomerDiscount' operation</programlisting>
          </informalexample>
        </section>
        <section id="sid-3735860_QuickStart-Whataboutthepayload%3F">
          
          <title>What about the payload?</title>
          <para>The method parameters and return values are going to represent our XML payload and thus require being compatible with JAXB2. Actually you wouldn't need any JAXB annotations for this particular example, because JAXB relies on meaningful defaults. For the sake of documentation we put the more important ones here.</para>
          <para>Take a look at the request parameter:</para>
          <informalexample>
            <programlisting>package org.jboss.test.ws.jaxws.samples.retail.profile;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;

import org.jboss.test.ws.jaxws.samples.retail.Customer;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(                                                  (1)
  name = "discountRequest",
  namespace="http://org.jboss.ws/samples/retail/profile",
  propOrder = { "customer" }
)
public class DiscountRequest {

   protected Customer customer;

   public DiscountRequest() {
   }

   public DiscountRequest(Customer customer) {
      this.customer = customer;
   }

   public Customer getCustomer() {
      return customer;
   }

   public void setCustomer(Customer value) {
      this.customer = value;
   }

}</programlisting>
          </informalexample>
          <informalexample>
            <programlisting>1. In this case we use @XmlType to specify an XML complex type name and override the namespace.</programlisting>
          </informalexample>
          <note>
            <para>
              If you have more complex mapping problems you need to consult the
              <ulink url="http://java.sun.com/webservices/jaxb/">JAXB documentation</ulink>
              .
            </para>
          </note>
        </section>
      </section>
      <section id="sid-3735860_QuickStart-Deployingserviceimplementations">
        
        <title>Deploying service implementations</title>
        <para>Service  deployment basically depends on the implementation type. As you may  already know web services can be implemented as EJB3 components or plain  old Java objects. This quick start leverages EJB3 components, that's why we are going to look at this case in the next  sections.</para>
        <section id="sid-3735860_QuickStart-EJB3services">
          
          <title>EJB3 services</title>
          <para>
            Simply wrap up the service implementation class, the endpoint interface and any custom data types in a JAR and drop them in the
            <emphasis role="italics">deployment</emphasis>
            directory. No additional deployment descriptors required. Any meta data  required for the deployment of the actual web service is taken from the  annotations provided on the implementation class and the service  endpoint interface. JBossWS will intercept that EJB3 deployment (the  bean will also be there) and create an HTTP endpoint at deploy-time.
          </para>
        </section>
        <section id="sid-3735860_QuickStart-TheJARpackagestructure">
          
          <title>The JAR package structure</title>
          <para>jar -tf jaxws-samples-retail.jar</para>
          <para>
            org/jboss/test/ws/jaxws/samples/retail/profile/DiscountRequest.class
            
            org/jboss/test/ws/jaxws/samples/retail/profile/DiscountResponse.class
            
            org/jboss/test/ws/jaxws/samples/retail/profile/ObjectFactory.class
            
            org/jboss/test/ws/jaxws/samples/retail/profile/ProfileMgmt.class
            
            org/jboss/test/ws/jaxws/samples/retail/profile/ProfileMgmtBean.class
            
            org/jboss/test/ws/jaxws/samples/retail/profile/ProfileMgmtService.class
            
            org/jboss/test/ws/jaxws/samples/retail/profile/package-info.class
          </para>
          <important>
            <para>If the deployment was successful you should be able to see your endpoint in the application server management console.</para>
          </important>
        </section>
      </section>
    </section>
    <section id="sid-3735860_QuickStart-Consumingwebservices">
      
      <title>Consuming web services</title>
      <para>When  creating web service clients you would usually start from the WSDL.  JBossWS ships with a set of tools to generate the required JAX-WS  artefacts to build client implementations. In the following section we  will look at the most basic usage patterns. For a more detailed  introduction to web service client please consult the user guide.</para>
      <section id="sid-3735860_QuickStart-Creatingtheclientartifacts">
        
        <title>Creating the client artifacts</title>
        <section id="sid-3735860_QuickStart-Usingwsconsume">
          
          <title>Using wsconsume</title>
          <para>
            The
            <emphasis role="italics">wsconsume</emphasis>
            tool is used to consume the abstract contract (WSDL) and produce annotated  Java classes (and optionally sources) that define it. We are going to  start with the WSDL from our retail example (ProfileMgmtService.wsdl). For a detailed tool reference you need to consult the user guide.
          </para>
          <informalexample>
            <programlisting>wsconsume is a command line tool that generates
portable JAX-WS artifacts from a WSDL file.

usage: org.jboss.ws.tools.jaxws.command.wsconsume [options] &lt;wsdl-url&gt;

options:
    -h, --help                  Show this help message
    -b, --binding=&lt;file&gt;        One or more JAX-WS or JAXB binding files
    -k, --keep                  Keep/Generate Java source
    -c  --catalog=&lt;file&gt;        Oasis XML Catalog file for entity resolution
    -p  --package=&lt;name&gt;        The target package for generated source
    -w  --wsdlLocation=&lt;loc&gt;    Value to use for @WebService.wsdlLocation
    -o, --output=&lt;directory&gt;    The directory to put generated artifacts
    -s, --source=&lt;directory&gt;    The directory to put Java source
    -q, --quiet                 Be somewhat more quiet
    -t, --show-traces           Show full exception stack traces</programlisting>
          </informalexample>
          <para>Let's try it on our sample:</para>
          <informalexample>
            <programlisting>~./wsconsume.sh -k -p org.jboss.test.ws.jaxws.samples.retail.profile ProfileMgmtService.wsdl  (1)

org/jboss/test/ws/jaxws/samples/retail/profile/Customer.java
org/jboss/test/ws/jaxws/samples/retail/profile/DiscountRequest.java
org/jboss/test/ws/jaxws/samples/retail/profile/DiscountResponse.java
org/jboss/test/ws/jaxws/samples/retail/profile/ObjectFactory.java
org/jboss/test/ws/jaxws/samples/retail/profile/ProfileMgmt.java
org/jboss/test/ws/jaxws/samples/retail/profile/ProfileMgmtService.java
org/jboss/test/ws/jaxws/samples/retail/profile/package-info.java</programlisting>
          </informalexample>
          <orderedlist>
            <listitem>
              <para>
                As you can see we did use the
                <code>-p</code>
                switch to specify the package name of the generated sources.
              </para>
            </listitem>
          </orderedlist>
        </section>
        <section id="sid-3735860_QuickStart-Thegeneratedartifactsexplained">
          
          <title>The generated artifacts explained</title>
          <informaltable>
            <tgroup cols="2">
              <thead>
                <row>
                  <entry>
                    <para>File</para>
                  </entry>
                  <entry>
                    <para>Purpose</para>
                  </entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <para>ProfileMgmt.java</para>
                  </entry>
                  <entry>
                    <para>Service Endpoint Interface</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>Customer.java</para>
                  </entry>
                  <entry>
                    <para>Custom data type</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>Discount*.java</para>
                  </entry>
                  <entry>
                    <para>Custom data type</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>ObjectFactory.java</para>
                  </entry>
                  <entry>
                    <para>JAXB XML Registry</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>package-info.java</para>
                  </entry>
                  <entry>
                    <para>Holder for JAXB package annotations</para>
                  </entry>
                </row>
                <row>
                  <entry>
                    <para>ProfileMgmtService.java</para>
                  </entry>
                  <entry>
                    <para>Service factory</para>
                  </entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>
          <para>
            Basically
            <emphasis role="italics">wsconsume</emphasis>
            generates all custom data types (JAXB annotated classes), the service  endpoint interface and a service factory class. We will look at how  these artifacts can be used the build web service client implementations  in the next section.
          </para>
        </section>
      </section>
      <section id="sid-3735860_QuickStart-Constructingaservicestub">
        
        <title>Constructing a service stub</title>
        <para>Web  service clients make use of a service stubs that hide the details of a  remote web service invocation. To a client application a WS invocation  just looks like an invocation of any other business component. In this  case the service endpoint interface acts as the business interface.  JAX-WS does use a service factory class to construct this as particular service stub:</para>
        <informalexample>
          <programlisting>import javax.xml.ws.Service;
[...]
Service service = Service.create(                                 (1)
new URL("http://example.org/service?wsdl"),
new QName("MyService")
);
ProfileMgmt profileMgmt = service.getPort(ProfileMgmt.class);     (2)

// do something with the service stub here...                     (3)</programlisting>
        </informalexample>
        <orderedlist>
          <listitem>
            <para>Create a service factory using the WSDL location and the service name</para>
          </listitem>
          <listitem>
            <para>Use the tool created service endpoint interface to build the service stub</para>
          </listitem>
          <listitem>
            <para>
              Use the stub like any other business interface
              
            </para>
          </listitem>
        </orderedlist>
      </section>
      <section id="sid-3735860_QuickStart-Appendix">
        
        <title>Appendix</title>
        <section id="sid-3735860_QuickStart-Samplewsdlcontract">
          
          <title>Sample wsdl contract</title>
          <informalexample>
            <programlisting>&lt;definitions
    name='ProfileMgmtService'
    targetNamespace='http://org.jboss.ws/samples/retail/profile'
    xmlns='http://schemas.xmlsoap.org/wsdl/'
    xmlns:ns1='http://org.jboss.ws/samples/retail'
    xmlns:soap='http://schemas.xmlsoap.org/wsdl/soap/'
    xmlns:tns='http://org.jboss.ws/samples/retail/profile'
    xmlns:xsd='http://www.w3.org/2001/XMLSchema'&gt;

   &lt;types&gt;

      &lt;xs:schema targetNamespace='http://org.jboss.ws/samples/retail'
                 version='1.0' xmlns:xs='http://www.w3.org/2001/XMLSchema'&gt;
         &lt;xs:complexType name='customer'&gt;
            &lt;xs:sequence&gt;
               &lt;xs:element minOccurs='0' name='creditCardDetails' type='xs:string'/&gt;
               &lt;xs:element minOccurs='0' name='firstName' type='xs:string'/&gt;
               &lt;xs:element minOccurs='0' name='lastName' type='xs:string'/&gt;
            &lt;/xs:sequence&gt;
         &lt;/xs:complexType&gt;
      &lt;/xs:schema&gt;

      &lt;xs:schema
          targetNamespace='http://org.jboss.ws/samples/retail/profile'
          version='1.0'
          xmlns:ns1='http://org.jboss.ws/samples/retail'
          xmlns:tns='http://org.jboss.ws/samples/retail/profile'
          xmlns:xs='http://www.w3.org/2001/XMLSchema'&gt;

         &lt;xs:import namespace='http://org.jboss.ws/samples/retail'/&gt;
         &lt;xs:element name='getCustomerDiscount'
                     nillable='true' type='tns:discountRequest'/&gt;
         &lt;xs:element name='getCustomerDiscountResponse'
                     nillable='true' type='tns:discountResponse'/&gt;
         &lt;xs:complexType name='discountRequest'&gt;
            &lt;xs:sequence&gt;
               &lt;xs:element minOccurs='0' name='customer' type='ns1:customer'/&gt;

            &lt;/xs:sequence&gt;
         &lt;/xs:complexType&gt;
         &lt;xs:complexType name='discountResponse'&gt;
            &lt;xs:sequence&gt;
               &lt;xs:element minOccurs='0' name='customer' type='ns1:customer'/&gt;
               &lt;xs:element name='discount' type='xs:double'/&gt;
            &lt;/xs:sequence&gt;
         &lt;/xs:complexType&gt;
      &lt;/xs:schema&gt;

   &lt;/types&gt;

   &lt;message name='ProfileMgmt_getCustomerDiscount'&gt;
      &lt;part element='tns:getCustomerDiscount' name='getCustomerDiscount'/&gt;
   &lt;/message&gt;
   &lt;message name='ProfileMgmt_getCustomerDiscountResponse'&gt;
      &lt;part element='tns:getCustomerDiscountResponse'
            name='getCustomerDiscountResponse'/&gt;
   &lt;/message&gt;
   &lt;portType name='ProfileMgmt'&gt;
      &lt;operation name='getCustomerDiscount'
                 parameterOrder='getCustomerDiscount'&gt;

         &lt;input message='tns:ProfileMgmt_getCustomerDiscount'/&gt;
         &lt;output message='tns:ProfileMgmt_getCustomerDiscountResponse'/&gt;
      &lt;/operation&gt;
   &lt;/portType&gt;
   &lt;binding name='ProfileMgmtBinding' type='tns:ProfileMgmt'&gt;
      &lt;soap:binding style='document'
                    transport='http://schemas.xmlsoap.org/soap/http'/&gt;
      &lt;operation name='getCustomerDiscount'&gt;
         &lt;soap:operation soapAction=''/&gt;
         &lt;input&gt;

            &lt;soap:body use='literal'/&gt;
         &lt;/input&gt;
         &lt;output&gt;
            &lt;soap:body use='literal'/&gt;
         &lt;/output&gt;
      &lt;/operation&gt;
   &lt;/binding&gt;
   &lt;service name='ProfileMgmtService'&gt;
      &lt;port binding='tns:ProfileMgmtBinding' name='ProfileMgmtPort'&gt;

         &lt;soap:address
             location='http://&lt;HOST&gt;:&lt;PORT&gt;/jaxws-samples-retail/ProfileMgmtBean'/&gt;
      &lt;/port&gt;
   &lt;/service&gt;
&lt;/definitions&gt;</programlisting>
          </informalexample>
        </section>
      </section>
    </section>
  </chapter>
