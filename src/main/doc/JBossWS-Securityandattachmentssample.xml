<?xml version="1.0" encoding="UTF-8"?><chapter id="chap_JBossWS-Securityandattachmentssample"><title>JBossWS-Securityandattachmentssample</title><section id="JBossWS-Securityandattachmentssample_Scenario"><title>Scenario</title><para>This sample targets those web service business scenarios requiring both exchange of attachments and different levels of communication security.</para><para> </para><para>The <emphasis role="bold">org.jboss.test.ws.jaxws.samples.news</emphasis> sample is about an oversimplified newspaper system. News agencies provide press releases to the main newspaper center. Information are processed, articles written and perhaps translated. Once a newspaper edition is ready, printer/distributor centers can download it (as well as previous editions).</para><para>This sample of course focuses on the web service endpoints making the above-mentioned communication possible.</para><para> </para></section>
<section id="JBossWS-Securityandattachmentssample_Attachments"><title>Attachments</title><para>The JBossWS stack supports two means of using attachment (perhaps binary) to SOAP message: <ulink url="http://community.jboss.org/docs/DOC-13972#MTOMXOP">MTOM/XOP</ulink> and <ulink url="http://http://www.jboss.org/community/wiki/JBossWS-UserGuide#SwaRef">SwaRef</ulink>. Basically both technologies allows attachments to be referenced in SOAP messages, moreover MTOM/XOP provides efficient data serialization for certain content types. Since third-party system might support MTOM/XOP or SwaRef only, we decided here to implement two different endpoints, each of them using one technology.</para><para> </para><section id="JBossWS-Securityandattachmentssample_The_press_release_endpoint"><title>The press release endpoint</title><section id="JBossWS-Securityandattachmentssample_Newspaper_server"><title>Newspaper server</title><para>The press release endpoint implementation is provided in the <emphasis>AbstractPressReleaseEndpoint</emphasis> class and simply outputs the received press release object to the logs:</para><screen xml:space="preserve"><emphasis role="bold">public</emphasis> <emphasis role="bold">abstract</emphasis> <emphasis role="bold">class</emphasis> AbstractPressReleaseEndpoint
{
   <emphasis role="bold">private</emphasis> Logger log = Logger.getLogger(this.getClass());
   
   <emphasis role="bold">public</emphasis> <emphasis role="bold">void</emphasis> submitPressRelease(PressRelease release)
   {
      log.info("Received a press release from agency: " + release.getAgencyId());
      log.info("- Title: " + release.getTitle());
      log.info("- Text: " + release.getBody());
   }
}
</screen><para>Here is the actual web service endpoint implementation:</para><screen xml:space="preserve">@Stateless
@WebService(name = "PressReleaseEndpoint",
            targetNamespace = "http://org.jboss.ws/samples/news",
            serviceName = "PressReleaseService")
@SOAPBinding(style = SOAPBinding.Style.DOCUMENT,
             use = SOAPBinding.Use.LITERAL)
@WebContext(contextRoot="/news",
            urlPattern="/pressRelease")
<emphasis role="bold">public</emphasis> <emphasis role="bold">class</emphasis> PressReleaseEndpoint <emphasis role="bold">extends</emphasis> AbstractPressReleaseEndpoint
{
   
}
</screen><para>To make it really easy, we used a SLSB endpoint without even defining an interface. We chose Document/Literal style/use and explicitely set the service name and namespace, as well as the context root and url pattern through the <emphasis>@WebContext</emphasis> annotation. Thus nothing special here, no attachments stuff required, we're simply preparing a basic service that will be secured in the next chapter.</para><para> </para></section>
<section id="JBossWS-Securityandattachmentssample_Agency_client"><title>Agency client</title><para>Once the server is implemented, we can deploy it and get the generated wsdl contract. This way we generate the client through the <ulink url="http://community.jboss.org/docs/DOC-13542">wsconsume</ulink> script (assume your bind address is localhost.localdomain:8080):</para><screen xml:space="preserve">wsconsume.sh -k -p org.jboss.test.ws.jaxws.samples.news.generated.agency http://localhost.localdomain:8080/news/pressRelease?wsdl
</screen><para>Referencing the generated classes, we hand code the agency client:</para><screen xml:space="preserve"><emphasis role="bold">public</emphasis> <emphasis role="bold">class</emphasis> Agency
{
   <emphasis role="bold">protected</emphasis> PressReleaseEndpoint endpoint;
 
   <emphasis role="bold">public</emphasis> Agency(URL url)
   {
      PressReleaseService service = <emphasis role="bold">new</emphasis> PressReleaseService(url, <emphasis role="bold">new</emphasis> QName("http://org.jboss.ws/samples/news", "PressReleaseService"));
      endpoint = service.getPressReleaseEndpointPort();
   }
   
   <emphasis role="bold">public</emphasis> <emphasis role="bold">void</emphasis> run(String title, String body)
   {
      PressRelease pressRelease = <emphasis role="bold">new</emphasis> PressRelease();
      pressRelease.setAgencyId("agency01");
      pressRelease.setTitle(title);
      pressRelease.setBody(body);
      pressRelease.setDate(<emphasis role="bold">new</emphasis> XMLGregorianCalendarImpl(<emphasis role="bold">new</emphasis> GregorianCalendar()));
      endpoint.submitPressRelease(pressRelease);
   }
   
   <emphasis role="bold">public</emphasis> <emphasis role="bold">static</emphasis> <emphasis role="bold">void</emphasis> main(String[] args)
   {
      <emphasis role="bold">try</emphasis>
      {
         <emphasis role="bold">if</emphasis> (args.length == 3)
         {
            Agency agency = <emphasis role="bold">new</emphasis> Agency(<emphasis role="bold">new</emphasis> URL(args[0]));
            agency.run(args[1], args[2]);
            System.out.println("Press release sent.");
         }
         <emphasis role="bold">else</emphasis>
         {
            System.out.println("Agency client usage:");
            System.out.println("wsrunclient.sh -classpath agency.jar org.jboss.test.ws.jaxws.samples.news.Agency http://host:port/news/pressRelease?wsdl title body");
         }
      }
      <emphasis role="bold">catch</emphasis> (Exception e)
      {
         e.printStackTrace();
      }
   }
}
</screen></section>
</section>
<section id="JBossWS-Securityandattachmentssample_The_newspaper_edition_endpoint"><title>The newspaper edition endpoint</title><section id="JBossWS-Securityandattachmentssample_MTOMXOP_newspaper_server"><title>MTOM/XOP newspaper server</title><para>The class used to ship newspaper edition from the main center to the printers/distributors is the following one:</para><screen xml:space="preserve"><emphasis role="bold">public</emphasis> <emphasis role="bold">class</emphasis> EditionMTOM
{
   <emphasis role="bold">private</emphasis> Date date;
   <emphasis role="bold">private</emphasis> DataHandler content;
   <emphasis role="bold">private</emphasis> String id;
   
   <emphasis role="bold">public</emphasis> Date getDate()
   {
      <emphasis role="bold">return</emphasis> date;
   }
   <emphasis role="bold">public</emphasis> <emphasis role="bold">void</emphasis> setDate(Date date)
   {
      this.date = date;
   }
   @XmlMimeType("text/plain")
   <emphasis role="bold">public</emphasis> DataHandler getContent()
   {
      <emphasis role="bold">return</emphasis> content;
   }
   <emphasis role="bold">public</emphasis> <emphasis role="bold">void</emphasis> setContent(DataHandler content)
   {
      this.content = content;
   }
   <emphasis role="bold">public</emphasis> String getId()
   {
      <emphasis role="bold">return</emphasis> id;
   }
   <emphasis role="bold">public</emphasis> <emphasis role="bold">void</emphasis> setId(String id)
   {
      this.id = id;
   }
}
</screen><para>Please note the <emphasis>@XmlMimeType</emphasis> annotation used to set the MIME type of the attachment being enclosed to the message. For ease we're using text-plain here, of course a real world use case will almost always require something else, perhaps <emphasis>application/octet-stream</emphasis>.</para><para>The sample newspaper endpoint implementation is quite trivial:</para><screen xml:space="preserve"><emphasis role="bold">public</emphasis> <emphasis role="bold">class</emphasis> AbstractNewspaperMTOMEndpoint
{
   <emphasis role="bold">private</emphasis> Logger log = Logger.getLogger(this.getClass());
   
   <emphasis role="bold">public</emphasis> EditionMTOM getNewspaperEdition(String newspaperId)
   {
      log.info("Newspaper edition requested: " + newspaperId);
      EditionMTOM edition = <emphasis role="bold">new</emphasis> EditionMTOM();
      edition.setContent(<emphasis role="bold">new</emphasis> DataHandler("This is the newspaper document with id " + newspaperId, "text/plain"));
      edition.setDate(<emphasis role="bold">new</emphasis> Date());
      edition.setId(newspaperId);
      <emphasis role="bold">return</emphasis> edition;
   }
   
   <emphasis role="bold">public</emphasis> String[] getNewspaperEditionIdList(Date from, Date to)
   {
      String[] ids = <emphasis role="bold">new</emphasis> String[2];
      ids[0] = "doc01";
      ids[1] = "doc02";
      <emphasis role="bold">return</emphasis> ids;
   }
}
</screen><para>As you can see the edition's content is provided through the DataHandler class, which allows you to use every content-types you might need. The actual web service configuration is provided through the <emphasis>NewspaperMTOMEndpoint</emphasis>:</para><screen xml:space="preserve">@Stateless
@WebService(endpointInterface = "org.jboss.test.ws.jaxws.samples.news.NewspaperMTOM",
      name = "NewspaperMTOMEndpoint",
      targetNamespace = "http://org.jboss.ws/samples/news",
      serviceName = "NewspaperMTOMService")
@SOAPBinding(style = SOAPBinding.Style.RPC,
       use = SOAPBinding.Use.LITERAL)
@WebContext(contextRoot="/news",
      urlPattern="/newspaper/mtom")
@BindingType(value = "http://schemas.xmlsoap.org/wsdl/soap/http?mtom=true")
<emphasis role="bold">public</emphasis> <emphasis role="bold">class</emphasis> NewspaperMTOMEndpoint <emphasis role="bold">extends</emphasis> AbstractNewspaperMTOMEndpoint <emphasis role="bold">implements</emphasis> NewspaperMTOM
{
   
}
</screen><para>In this example we're using RPC/Literal to keep things easier; the <emphasis>@BindingType</emphasis> annotation is required to enable MTOM processing.</para><para> </para></section>
<section id="JBossWS-Securityandattachmentssample_SwaRef_newspaper_server"><title>SwaRef newspaper server</title><para>The class used to ship newspaper edition from the main center to the printers/distributors is the following one:</para><screen xml:space="preserve">@XmlRootElement
<emphasis role="bold">public</emphasis> <emphasis role="bold">class</emphasis> EditionSWA
{
   <emphasis role="bold">private</emphasis> Date date;
   <emphasis role="bold">private</emphasis> DataHandler content;
   <emphasis role="bold">private</emphasis> String id;
   
   <emphasis role="bold">public</emphasis> Date getDate()
   {
      <emphasis role="bold">return</emphasis> date;
   }
   <emphasis role="bold">public</emphasis> <emphasis role="bold">void</emphasis> setDate(Date date)
   {
      this.date = date;
   }
   @XmlElement
   @XmlAttachmentRef
   <emphasis role="bold">public</emphasis> DataHandler getContent()
   {
      <emphasis role="bold">return</emphasis> content;
   }
   <emphasis role="bold">public</emphasis> <emphasis role="bold">void</emphasis> setContent(DataHandler content)
   {
      this.content = content;
   }
   <emphasis role="bold">public</emphasis> String getId()
   {
      <emphasis role="bold">return</emphasis> id;
   }
   <emphasis role="bold">public</emphasis> <emphasis role="bold">void</emphasis> setId(String id)
   {
      this.id = id;
   }
}
</screen><para>Please note the <emphasis>@XmlAttachmentRef</emphasis> annotation used to define which attribute will be enclosed as attachment. The <emphasis>DataHandler</emphasis> class has to be used here too.</para><para> </para><para>The sample newspaper endpoint implementation is the same as the MTOM one except for the <emphasis>EditionSWA</emphasis> class used instead of <emphasis>EditionMTOM</emphasis>. The web service endpoint configuration instead is simpler, since nothing more than what you would have in an usual endpoint implementation is required:</para><screen xml:space="preserve">@Stateless
@WebService(endpointInterface = "org.jboss.test.ws.jaxws.samples.news.NewspaperSWA",
      name = "NewspaperSWAEndpoint",
      targetNamespace = "http://org.jboss.ws/samples/news",
      serviceName = "NewspaperSWAService")
@SOAPBinding(style = SOAPBinding.Style.RPC,
       use = SOAPBinding.Use.LITERAL)
@WebContext(contextRoot="/news",
      urlPattern="/newspaper/swa")
<emphasis role="bold">public</emphasis> <emphasis role="bold">class</emphasis> NewspaperSWAEndpoint <emphasis role="bold">extends</emphasis> AbstractNewspaperSWAEndpoint <emphasis role="bold">implements</emphasis> NewspaperSWA
{
   
}
</screen></section>
<section id="JBossWS-Securityandattachmentssample_Printer_client"><title>Printer client</title><para>As for the press release endpoint, we generate the client stuff using the <ulink url="http://community.jboss.org/docs/DOC-13542">wsconsume</ulink> script, given the published wsdl contract:</para><screen xml:space="preserve">wsconsume.sh -k -p org.jboss.test.ws.jaxws.samples.news.generated.printer.mtom http://localhost.localdomain:8080/news/newspaper/mtom?wsdl
wsconsume.sh -k -p org.jboss.test.ws.jaxws.samples.news.generated.printer.swa http://localhost.localdomain:8080/news/newspaper/swa?wsdl
</screen><para>The sample printer is coded referencing the generated classes and allows invocation of both the endpoints:</para><screen xml:space="preserve"><emphasis role="bold">public</emphasis> <emphasis role="bold">class</emphasis> Printer
{
   <emphasis role="bold">protected</emphasis> NewspaperMTOMEndpoint mtomEndpoint;
   <emphasis role="bold">protected</emphasis> NewspaperSWAEndpoint swaEndpoint;
   <emphasis role="bold">protected</emphasis> <emphasis role="bold">boolean</emphasis> mtom;
   
   <emphasis role="bold">public</emphasis> Printer(URL url, <emphasis role="bold">boolean</emphasis> mtom)
   {
      this.mtom = mtom;
      <emphasis role="bold">if</emphasis> (mtom)
      {
         NewspaperMTOMService mtomService = <emphasis role="bold">new</emphasis> NewspaperMTOMService(url, <emphasis role="bold">new</emphasis> QName("http://org.jboss.ws/samples/news", "NewspaperMTOMService"));
         mtomEndpoint = mtomService.getNewspaperMTOMEndpointPort();
      }
      <emphasis role="bold">else</emphasis>
      {
         NewspaperSWAService swaService = <emphasis role="bold">new</emphasis> NewspaperSWAService(url, <emphasis role="bold">new</emphasis> QName("http://org.jboss.ws/samples/news", "NewspaperSWAService"));
         swaEndpoint = swaService.getNewspaperSWAEndpointPort();
      }
   }
   
   <emphasis role="bold">public</emphasis> <emphasis role="bold">void</emphasis> run() <emphasis role="bold">throws</emphasis> IOException
   {
      XMLGregorianCalendar from = <emphasis role="bold">new</emphasis> XMLGregorianCalendarImpl(<emphasis role="bold">new</emphasis> GregorianCalendar(2008,1,10));
      XMLGregorianCalendar to = <emphasis role="bold">new</emphasis> XMLGregorianCalendarImpl(<emphasis role="bold">new</emphasis> GregorianCalendar(2008,1,14));
      <emphasis role="bold">if</emphasis> (mtom)
      {
         ((SOAPBinding)(((BindingProvider)mtomEndpoint).getBinding())).setMTOMEnabled(<emphasis role="bold">true</emphasis>);
         <emphasis role="bold">for</emphasis> (String id : mtomEndpoint.getNewspaperEditionIdList(from, to).getItem())
         {
            System.out.println("Downloading newspaper document: " + id);
            EditionMTOM edition = mtomEndpoint.getNewspaperEdition(id);
            System.out.println("Content: " + edition.getContent());
         }
      }
      <emphasis role="bold">else</emphasis>
      {
         <emphasis role="bold">for</emphasis> (String id : swaEndpoint.getNewspaperEditionIdList(from, to).getItem())
         {
            System.out.println("Downloading newspaper document: " + id);
            EditionSWA edition = swaEndpoint.getNewspaperEdition(id);
            DataHandler dh = edition.getContent();
            System.out.println("Content type: " + dh.getContentType());
            System.out.println("Content: " + dh.getContent());
         }
      }
   }
   
   <emphasis role="bold">public</emphasis> <emphasis role="bold">static</emphasis> <emphasis role="bold">void</emphasis> main(String[] args)
   {
      <emphasis role="bold">try</emphasis>
      {
         <emphasis role="bold">if</emphasis> (args.length == 1)
         {
            Printer printer = <emphasis role="bold">new</emphasis> Printer(<emphasis role="bold">new</emphasis> URL(args[0]), args[0].endsWith("mtom?wsdl"));
            printer.run();
         }
         <emphasis role="bold">else</emphasis>
         {
            System.out.println("Printer client usage:");
            System.out.println("wsrunclient.sh -classpath agency.jar org.jboss.test.ws.jaxws.samples.news.Printer http://host:port/news/newspaper/mtom?wsdl");
            System.out.println("or");
            System.out.println("wsrunclient.sh -classpath agency.jar org.jboss.test.ws.jaxws.samples.news.Printer http://host:port/news/newspaper/swa?wsdl");
         }
      }
      <emphasis role="bold">catch</emphasis> (Exception e)
      {
         e.printStackTrace();
      }
   }
}
</screen><para>Please note we used the SOAPBinding's <emphasis>setMTOMEnabled(boolean enable)</emphasis> method to enable the MTOM/XOP processing.</para><para> </para></section>
</section>
<section id="JBossWS-Securityandattachmentssample_Running_the_sample"><title>Running the sample</title><para>Let's build the sample and take a look at the final contents of the generated archives; the newspaper main center is in <emphasis>jaxws-samples-news-step1-newspaper.jar</emphasis>:</para><screen xml:space="preserve">[alessio@localhost trunk]$ jar -tvf output/tests/libs/jaxws-samples-news-step1-newspaper.jar
     0 Fri Feb 08 11:40:50 CET 2008 META-INF/
   106 Fri Feb 08 11:40:48 CET 2008 META-INF/MANIFEST.MF
     0 Fri Feb 08 11:38:20 CET 2008 org/
     0 Fri Feb 08 11:38:20 CET 2008 org/jboss/
     0 Fri Feb 08 11:38:20 CET 2008 org/jboss/test/
     0 Fri Feb 08 11:39:50 CET 2008 org/jboss/test/ws/
     0 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/
     0 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/
     0 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/
  1867 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/AbstractNewspaperMTOMEndpoint.class
  1861 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/AbstractNewspaperSWAEndpoint.class
  1281 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/AbstractPressReleaseEndpoint.class
  1223 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/EditionMTOM.class
  1301 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/EditionSWA.class
   951 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/NewspaperMTOM.class
  1298 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/NewspaperMTOMEndpoint.class
   948 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/NewspaperSWA.class
  1265 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/NewspaperSWAEndpoint.class
  1208 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/PressRelease.class
  1059 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/PressReleaseEndpoint.class
</screen><para>As you can see, it contains both the press release and newspaper edition endpoint implementations (the latter in MTOM and Swa versions). No descriptor is required.</para><para>The agency archive is <emphasis>jaxws-samples-news-step1-agency.jar</emphasis>:</para><screen xml:space="preserve">[alessio@localhost trunk]$ jar -tvf output/tests/libs/jaxws-samples-news-step1-agency.jar 
     0 Fri Feb 08 11:40:50 CET 2008 META-INF/
   106 Fri Feb 08 11:40:48 CET 2008 META-INF/MANIFEST.MF
     0 Fri Feb 08 11:38:20 CET 2008 org/
     0 Fri Feb 08 11:38:20 CET 2008 org/jboss/
     0 Fri Feb 08 11:38:20 CET 2008 org/jboss/test/
     0 Fri Feb 08 11:39:50 CET 2008 org/jboss/test/ws/
     0 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/
     0 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/
     0 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/
  2592 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/Agency.class
     0 Fri Feb 08 11:39:50 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/
     0 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/agency/
  2813 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/agency/ObjectFactory.class
  1640 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/agency/PressRelease.class
   865 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/agency/PressReleaseEndpoint.class
  1725 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/agency/PressReleaseService.class
  1035 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/agency/SubmitPressRelease.class
   647 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/agency/SubmitPressReleaseResponse.class
   291 Fri Feb 08 11:39:50 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/agency/package-info.class
</screen><para>It contains nothing more than the hand coded client class and the wsconsume generated classes.</para><para>Finally, the printer archive is <emphasis>jaxws-samples-news-step1-printer.jar</emphasis>:</para><screen xml:space="preserve">[alessio@localhost trunk]$ jar -tvf output/tests/libs/jaxws-samples-news-step1-printer.jar 
     0 Fri Feb 08 11:40:50 CET 2008 META-INF/
   106 Fri Feb 08 11:40:48 CET 2008 META-INF/MANIFEST.MF
     0 Fri Feb 08 11:38:20 CET 2008 org/
     0 Fri Feb 08 11:38:20 CET 2008 org/jboss/
     0 Fri Feb 08 11:38:20 CET 2008 org/jboss/test/
     0 Fri Feb 08 11:39:50 CET 2008 org/jboss/test/ws/
     0 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/
     0 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/
     0 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/
  5444 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/Printer.class
     0 Fri Feb 08 11:39:50 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/
     0 Fri Feb 08 11:39:50 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/printer/
     0 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/printer/mtom/
  1599 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/printer/mtom/EditionMTOM.class
  1115 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/printer/mtom/NewspaperMTOMEndpoint.class
  1760 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/printer/mtom/NewspaperMTOMService.class
   958 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/printer/mtom/ObjectFactory.class
   993 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/printer/mtom/StringArray.class
   295 Fri Feb 08 11:39:50 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/printer/mtom/package-info.class
     0 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/printer/swa/
  1717 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/printer/swa/EditionSWA.class
  1108 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/printer/swa/NewspaperSWAEndpoint.class
  1746 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/printer/swa/NewspaperSWAService.class
  1896 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/printer/swa/ObjectFactory.class
   991 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/printer/swa/StringArray.class
   294 Fri Feb 08 11:39:50 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/printer/swa/package-info.class
</screen><para>The same things just written for the agency archive apply here too.</para><para> </para><para>You need to deploy the newspaper archive to your application server (perhaps you already did so, if you tried creating the client above); then just run the two clients using the <ulink url="http://community.jboss.org/docs/DOC-13529">wsrunclient</ulink> script.</para><para>Running the agency client:</para><screen xml:space="preserve">wsrunclient.sh -classpath jaxws-samples-news-step1-agency.jar org.jboss.test.ws.jaxws.samples.news.Agency http://localhost.localdomain:8080/news/pressRelease?wsdl Title Body
</screen><para>you'll get something like this on the server log:</para><screen xml:space="preserve">15:38:30,360 INFO  [PressReleaseEndpoint] Received a press release from agency: agency01
15:38:30,360 INFO  [PressReleaseEndpoint] - Title: Title
15:38:30,360 INFO  [PressReleaseEndpoint] - Text: Body
</screen><para>Running the printer client (MTOM/XOP version):</para><screen xml:space="preserve">wsrunclient.sh -classpath jaxws-samples-news-step1-printer.jar org.jboss.test.ws.jaxws.samples.news.Printer http://localhost.localdomain:8080/news/newspaper/mtom?wsdl
</screen><para>you'll get this on the client log:</para><screen xml:space="preserve">Downloading newspaper document: doc01
Content: VGhpcyBpcyB0aGUgbmV3c3BhcGVyIGRvY3VtZW50IHdpdGggaWQgZG9jMDE=
Downloading newspaper document: doc02
Content: VGhpcyBpcyB0aGUgbmV3c3BhcGVyIGRvY3VtZW50IHdpdGggaWQgZG9jMDI=
</screen><para>The capture of one of the exchanged messages shows the <emphasis>xop:Include</emphasis> element being used to reference the attachment:</para><screen xml:space="preserve">HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
X-Powered-By: Servlet 2.4; JBoss-4.2.3.GA (build: SVNTag=JBoss_4_2_3_GA date=200801291425)/JBossWeb-2.0
Content-Type: multipart/related; type="application/xop+xml"; start="&lt;rootpart@ws.jboss.org&gt;"; .start-info="text/xml";   .boundary="----=_Part_11_27939361.1202482223654"
Transfer-Encoding: chunked
Date: Fri, 08 Feb 2008 14:50:23 GMT

------=_Part_11_27939361.1202482223654
Content-Type: application/xop+xml; type="text/xml"
Content-Transfer-Encoding: 8bit
Content-ID: &lt;rootpart@ws.jboss.org&gt;

&lt;env:Envelope xmlns:env='http://schemas.xmlsoap.org/soap/envelope/'&gt;&lt;env:Header&gt;&lt;/env:Header&gt;&lt;env:Body&gt;&lt;ns1:getNewspaperEditionResponse xmlns:ns1='http://org.jboss.ws/samples/news'&gt;&lt;return&gt;&lt;content&gt;&lt;xop:Include xmlns:xop="http://www.w3.org/2004/08/xop/include" href="cid:content-454e2c56-10d9-4393-8050-241578a4f812@ws.jboss.org"/&gt;&lt;/content&gt;&lt;date&gt;2008-02-08T15:50:23.652+01:00&lt;/date&gt;&lt;id&gt;doc02&lt;/id&gt;&lt;/return&gt;&lt;/ns1:getNewspaperEditionResponse&gt;&lt;/env:Body&gt;&lt;/env:Envelope&gt;

------=_Part_11_27939361.1202482223654
Content-Type: text/plain
Content-Transfer-Encoding: binary
Content-Id: &lt;content-454e2c56-10d9-4393-8050-241578a4f812@ws.jboss.org&gt;

This is the newspaper document with id doc02

------=_Part_11_27939361.1202482223654--
</screen><para>Finally, running the SwaRef version of printer client:</para><screen xml:space="preserve">wsrunclient.sh -classpath jaxws-samples-news-step1-printer.jar org.jboss.test.ws.jaxws.samples.news.Printer http://localhost.localdomain:8080/news/newspaper/swa?wsdl
</screen><para>you'll get this on the client log:</para><screen xml:space="preserve">Downloading newspaper document: doc01
Content: text/plain
Content: This is the newspaper document with id doc01
Downloading newspaper document: doc02
Content: text/plain
Content: This is the newspaper document with id doc02
</screen><para>The capture of one of the exchanged messages shows the MIME attachment being used:</para><screen xml:space="preserve">HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
X-Powered-By: Servlet 2.4; JBoss-4.2.3.GA (build: SVNTag=JBoss_4_2_3_GA date=200801291425)/JBossWeb-2.0
Content-Type: multipart/related; type="text/xml"; start="&lt;rootpart@ws.jboss.org&gt;";   .boundary="----=_Part_7_26058.1202481869751"
Transfer-Encoding: chunked
Date: Fri, 08 Feb 2008 14:44:29 GMT

------=_Part_7_26058.1202481869751
Content-Type: text/xml; charset=UTF-8
Content-Transfer-Encoding: 8bit
Content-ID: &lt;rootpart@ws.jboss.org&gt;

&lt;env:Envelope xmlns:env='http://schemas.xmlsoap.org/soap/envelope/'&gt;&lt;env:Header&gt;&lt;/env:Header&gt;&lt;env:Body&gt;&lt;ns1:getNewspaperEditionResponse xmlns:ns1='http://org.jboss.ws/samples/news'&gt;&lt;return&gt;&lt;content&gt;cid:0-1202481869750-15993608@ws.jboss.org&lt;/content&gt;&lt;date&gt;2008-02-08T15:44:29.749+01:00&lt;/date&gt;&lt;id&gt;doc02&lt;/id&gt;&lt;/return&gt;&lt;/ns1:getNewspaperEditionResponse&gt;&lt;/env:Body&gt;&lt;/env:Envelope&gt;

------=_Part_7_26058.1202481869751
Content-Type: text/plain
Content-Transfer-Encoding: binary
Content-Id: &lt;0-1202481869750-15993608@ws.jboss.org&gt;

This is the newspaper document with id doc02

------=_Part_7_26058.1202481869751--</screen></section>
</section>
<section id="JBossWS-Securityandattachmentssample_Security"><title>Security</title><para>Securing a web service application implies performing different changes to both consumers and producers to achieve for example confidentiality, accountability, etc. Different degrees of security might be required according to the application's aims. That's the reason why the current sample shows different solutions.</para><para> </para><section id="JBossWS-Securityandattachmentssample_The_press_release_endpoint_305547"><title>The press release endpoint</title><para>Suppose the newspaper and agency's owners want the maximum confidentiality regarding the exchanged press release. Thus we decide to obtain message level security using <link linkend="WSSecurity">WS-Security</link>. In particular, messages will be both encrypted and signed; moreover each of them will have a timestamp.</para><para> </para><para>Assuming the client side to be <emphasis>alice</emphasis> and the server side <emphasis>bob</emphasis>, we're going to use the following jbossws ws-security configuration files (jboss-wsse-client.xml first):</para><screen xml:space="preserve">&lt;jboss-ws-security xmlns="<ulink url="http://www.jboss.com/ws-security/config">http://www.jboss.com/ws-security/config</ulink>"
                   xmlns:xsi="<ulink url="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</ulink>"
                   xsi:schemaLocation="<ulink url="http://www.jboss.com/ws-security/config">http://www.jboss.com/ws-security/config</ulink> 
                   <ulink url="http://www.jboss.com/ws-security/schema/jboss-ws-security_1_0.xsd">http://www.jboss.com/ws-security/schema/jboss-ws-security_1_0.xsd</ulink>"&gt;
  &lt;key-store-file&gt;META-INF/alice-sign_enc.jks&lt;/key-store-file&gt;
  &lt;key-store-password&gt;password&lt;/key-store-password&gt;
  &lt;key-store-type&gt;jks&lt;/key-store-type&gt;
  &lt;trust-store-file&gt;META-INF/wsse10.truststore&lt;/trust-store-file&gt;
  &lt;trust-store-password&gt;password&lt;/trust-store-password&gt;
  &lt;config&gt;
       &lt;timestamp ttl="300"/&gt;
       &lt;sign type="x509v3" alias="1" includeTimestamp="true"/&gt;
    &lt;encrypt type="x509v3" alias="bob"/&gt;
    &lt;requires&gt;
      &lt;signature/&gt;
      &lt;encryption/&gt;
    &lt;/requires&gt;
  &lt;/config&gt;
&lt;/jboss-ws-security&gt;&lt;jboss-ws-security xmlns="<ulink url="http://www.jboss.com/ws-security/config">http://www.jboss.com/ws-security/config</ulink>"
                   xmlns:xsi="<ulink url="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</ulink>"
                   xsi:schemaLocation="<ulink url="http://www.jboss.com/ws-security/config">http://www.jboss.com/ws-security/config</ulink>
                   <ulink url="http://www.jboss.com/ws-security/schema/jboss-ws-security_1_0.xsd">http://www.jboss.com/ws-security/schema/jboss-ws-security_1_0.xsd</ulink>"&gt;
     &lt;key-store-file&gt;META-INF/bob-sign_enc.jks&lt;/key-store-file&gt;
        &lt;key-store-password&gt;password&lt;/key-store-password&gt;
        &lt;key-store-type&gt;jks&lt;/key-store-type&gt;
        &lt;trust-store-file&gt;META-INF/wsse10.truststore&lt;/trust-store-file&gt;
        &lt;trust-store-password&gt;password&lt;/trust-store-password&gt;
     &lt;config&gt;
          &lt;timestamp ttl="300"/&gt;
          &lt;sign type="x509v3" alias="1" includeTimestamp="true"/&gt;
          &lt;encrypt type="x509v3" alias="alice"/&gt;
           &lt;requires&gt;
             &lt;signature/&gt;
             &lt;encryption/&gt;      
           &lt;/requires&gt;
        &lt;/config&gt;
&lt;/jboss-ws-security&gt;</screen><para>Please refer to the <emphasis>src/test/resources/jaxws/samples/news/META-INF/readme.txt</emphasis> file for a contents' explanation of the keystores, truststore and certificates used in the sample.</para><para>The secure web service endpoint is obtained specifying the ws-security endpoint configuration through the <emphasis>@EndpointConfig</emphasis> annotation:</para><screen xml:space="preserve">@Stateless
@WebService(name = "PressReleaseEndpoint",
            targetNamespace = "http://org.jboss.ws/samples/news",
            serviceName = "PressReleaseService")
@SOAPBinding(style = SOAPBinding.Style.DOCUMENT,
             use = SOAPBinding.Use.LITERAL)
@WebContext(contextRoot="/news",
            urlPattern="/pressRelease")
@EndpointConfig(configName = "Standard WSSecurity Endpoint")
<emphasis role="bold">public</emphasis> <emphasis role="bold">class</emphasis> SecurePressReleaseEndpoint <emphasis role="bold">extends</emphasis> AbstractPressReleaseEndpoint
{
   
}
</screen><para>Of course also the secure agency client needs the right configuration:</para><screen xml:space="preserve"><emphasis role="bold">public</emphasis> <emphasis role="bold">class</emphasis> SecureAgency <emphasis role="bold">extends</emphasis> Agency
{
   <emphasis role="bold">public</emphasis> SecureAgency(URL url)
   {
      <emphasis role="bold">super</emphasis>(url);
      ((StubExt)endpoint).setConfigName("Standard WSSecurity Client");
   }
   
   <emphasis role="bold">public</emphasis> <emphasis role="bold">static</emphasis> <emphasis role="bold">void</emphasis> main(String[] args)
   {
      <emphasis role="bold">try</emphasis>
      {
         <emphasis role="bold">if</emphasis> (args.length == 3)
         {
            Agency agency = <emphasis role="bold">new</emphasis> SecureAgency(<emphasis role="bold">new</emphasis> URL(args[0]));
            agency.run(args[1], args[2]);
            System.out.println("Press release sent.");
         }
         <emphasis role="bold">else</emphasis>
         {
            System.out.println("SecureAgency client usage:");
            System.out.println("./wsrunclient.sh -classpath agency.jar org.jboss.test.ws.jaxws.samples.news.SecureAgency " +
                      "http://localhost.localdomain:8080/news/pressRelease?wsdl title body");
         }
      }
      <emphasis role="bold">catch</emphasis> (Exception e)
      {
         e.printStackTrace();
      }
   }
}
</screen></section>
<section id="JBossWS-Securityandattachmentssample_The_newspaper_edition_endpoint_15069"><title>The newspaper edition endpoint</title><para>Suppose the message exchange between the newspaper main center and the printers/distributors has lower security requirements; we decide to achieve accountability through BASIC <ulink url="http://community.jboss.org/docs/DOC-13533">authentication</ulink> and confidentiality <ulink url="http://community.jboss.org/docs/DOC-13534">securing the transport</ulink> with HTTPS.</para><para>The secure MTOM/XOP endpoint implementation is obtained this way:</para><screen xml:space="preserve">@Stateless
@WebService(endpointInterface = "org.jboss.test.ws.jaxws.samples.news.NewspaperMTOM",
      name = "NewspaperMTOMEndpoint",
      targetNamespace = "http://org.jboss.ws/samples/news",
      serviceName = "NewspaperMTOMService")
@SOAPBinding(style = SOAPBinding.Style.RPC,
       use = SOAPBinding.Use.LITERAL)
@SecurityDomain("JBossWS")
@WebContext(contextRoot="/news",
      urlPattern="/newspaper/mtom",
      authMethod="BASIC",
      transportGuarantee="CONFIDENTIAL",
      secureWSDLAccess=<emphasis role="bold">false</emphasis>)
@BindingType(value = "http://schemas.xmlsoap.org/wsdl/soap/http?mtom=true")
<emphasis role="bold">public</emphasis> <emphasis role="bold">class</emphasis> SecureNewspaperMTOMEndpoint <emphasis role="bold">extends</emphasis> AbstractNewspaperMTOMEndpoint <emphasis role="bold">implements</emphasis> NewspaperMTOM
{
   
}
</screen><para>For ease, we use the <emphasis>JBossWS</emphasis> default security domain, of course you might want to use another one with your own custom login module. The <emphasis>@WebContext</emphasis> annotation sets the authentication method and enforce the https use (<emphasis>transportGuarantee="CONFIDENTIAL"</emphasis>). The secure SwaRef endpoint implementation is obtained the same way as the MTOM/XOP one.</para><para> </para><para>On the client side, we just need to set the username/password:</para><screen xml:space="preserve"><emphasis role="bold">public</emphasis> <emphasis role="bold">class</emphasis> SecurePrinter <emphasis role="bold">extends</emphasis> Printer
{
   <emphasis role="bold">public</emphasis> SecurePrinter(URL url, <emphasis role="bold">boolean</emphasis> mtom)
   {
      <emphasis role="bold">super</emphasis>(url,mtom);
      BindingProvider bp = mtom ? (BindingProvider)mtomEndpoint : (BindingProvider)swaEndpoint;
      bp.getRequestContext().put(BindingProvider.USERNAME_PROPERTY, "kermit");
      bp.getRequestContext().put(BindingProvider.PASSWORD_PROPERTY, "thefrog");
      System.setProperty("org.jboss.security.ignoreHttpsHost", "true");
   }
   
   <emphasis role="bold">public</emphasis> <emphasis role="bold">static</emphasis> <emphasis role="bold">void</emphasis> main(String[] args)
   {
      <emphasis role="bold">try</emphasis>
      {
         <emphasis role="bold">if</emphasis> (args.length == 1)
         {
            SecurePrinter printer = <emphasis role="bold">new</emphasis> SecurePrinter(<emphasis role="bold">new</emphasis> URL(args[0]), args[0].endsWith("mtom?wsdl"));
            printer.run();
         }
         <emphasis role="bold">else</emphasis>
         {
            System.out.println("SecurePrinter client usage:");
            System.out.println("wsrunclient.sh -classpath agency.jar -Djavax.net.ssl.trustStore=truststorePath -Djavax.net.ssl.trustStorePassword=truststorePwd " +
                      "org.jboss.test.ws.jaxws.samples.news.SecurePrinter http://host:port/news/newspaper/mtom?wsdl");
            System.out.println("or");
            System.out.println("wsrunclient.sh -classpath agency.jar -Djavax.net.ssl.trustStore=truststorePath -Djavax.net.ssl.trustStorePassword=truststorePwd " +
                      "org.jboss.test.ws.jaxws.samples.news.SecurePrinter http://host:port/news/newspaper/swa?wsdl");
         }
      }
      <emphasis role="bold">catch</emphasis> (Exception e)
      {
         e.printStackTrace();
      }
   }
}
</screen><para>For an explanation of the reason for setting the <emphasis>org.jboss.security.ignoreHttpsHost</emphasis> property to true, please read <ulink url="http://community.jboss.org/docs/DOC-13534#Client_side">here</ulink>.</para><para>As suggested in the SecurePrinter usage info, you would need to set the <emphasis>javax.net.ssl.trustStore</emphasis> and <emphasis>javax.net.ssl.trustStorePassword</emphasis> for the client to be able to perform the https connection. Finally, we enabled the server Tomcat+SSL connector adding this to the jboss-web.deployer/server.xml:</para><screen xml:space="preserve">&lt;Connector port="8443" protocol="HTTP/1.1" SSLEnabled="true"
             maxThreads="150" scheme="https" secure="true"
             keystoreFile="${jboss.server.home.dir}/my.keystore"
             truststoreFile="${jboss.server.home.dir}/my.truststore"
             clientAuth="false" sslProtocol="TLS" /&gt;</screen></section>
<section id="JBossWS-Securityandattachmentssample_Running_the_sample_824473"><title>Running the sample</title><para>Once we build the sample we have the following archives for the secure version:</para><screen xml:space="preserve">[alessio@localhost trunk]$ jar -tvf output/tests/libs/jaxws-samples-news-step2-newspaper.jar 
     0 Fri Feb 08 17:41:44 CET 2008 META-INF/
   106 Fri Feb 08 17:41:42 CET 2008 META-INF/MANIFEST.MF
     0 Fri Feb 08 11:38:20 CET 2008 org/
     0 Fri Feb 08 11:38:20 CET 2008 org/jboss/
     0 Fri Feb 08 11:38:20 CET 2008 org/jboss/test/
     0 Fri Feb 08 11:39:50 CET 2008 org/jboss/test/ws/
     0 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/
     0 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/
     0 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/
  1867 Fri Feb 08 17:41:30 CET 2008 org/jboss/test/ws/jaxws/samples/news/AbstractNewspaperMTOMEndpoint.class
  1861 Fri Feb 08 17:41:30 CET 2008 org/jboss/test/ws/jaxws/samples/news/AbstractNewspaperSWAEndpoint.class
  1281 Fri Feb 08 17:41:30 CET 2008 org/jboss/test/ws/jaxws/samples/news/AbstractPressReleaseEndpoint.class
  1223 Fri Feb 08 17:41:30 CET 2008 org/jboss/test/ws/jaxws/samples/news/EditionMTOM.class
  1301 Fri Feb 08 17:41:30 CET 2008 org/jboss/test/ws/jaxws/samples/news/EditionSWA.class
   951 Fri Feb 08 17:41:30 CET 2008 org/jboss/test/ws/jaxws/samples/news/NewspaperMTOM.class
   948 Fri Feb 08 17:41:30 CET 2008 org/jboss/test/ws/jaxws/samples/news/NewspaperSWA.class
  1208 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/PressRelease.class
  1480 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/SecureNewspaperMTOMEndpoint.class
  1379 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/SecureNewspaperSWAEndpoint.class
  1173 Fri Feb 08 17:41:30 CET 2008 org/jboss/test/ws/jaxws/samples/news/SecurePressReleaseEndpoint.class
  2362 Fri Feb 08 11:40:32 CET 2008 META-INF/bob-sign_enc.jks
   850 Fri Feb 08 11:40:20 CET 2008 META-INF/jboss-wsse-server.xml
  1656 Fri Feb 08 11:40:30 CET 2008 META-INF/wsse10.truststore
</screen><screen xml:space="preserve">[alessio@localhost trunk]$ jar -tvf output/tests/libs/jaxws-samples-news-step2-agency.jar 
     0 Fri Feb 08 17:41:44 CET 2008 META-INF/
   106 Fri Feb 08 17:41:42 CET 2008 META-INF/MANIFEST.MF
     0 Fri Feb 08 11:38:20 CET 2008 org/
     0 Fri Feb 08 11:38:20 CET 2008 org/jboss/
     0 Fri Feb 08 11:38:20 CET 2008 org/jboss/test/
     0 Fri Feb 08 11:39:50 CET 2008 org/jboss/test/ws/
     0 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/
     0 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/
     0 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/
  2592 Fri Feb 08 17:41:30 CET 2008 org/jboss/test/ws/jaxws/samples/news/Agency.class
  1461 Fri Feb 08 17:41:30 CET 2008 org/jboss/test/ws/jaxws/samples/news/SecureAgency.class
     0 Fri Feb 08 11:39:50 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/
     0 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/agency/
  2813 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/agency/ObjectFactory.class
  1640 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/agency/PressRelease.class
   865 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/agency/PressReleaseEndpoint.class
  1725 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/agency/PressReleaseService.class
  1035 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/agency/SubmitPressRelease.class
   647 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/agency/SubmitPressReleaseResponse.class
   291 Fri Feb 08 11:39:50 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/agency/package-info.class
  2358 Fri Feb 08 11:40:30 CET 2008 META-INF/alice-sign_enc.jks
   814 Fri Feb 08 17:41:32 CET 2008 META-INF/jboss-wsse-client.xml
  1656 Fri Feb 08 11:40:30 CET 2008 META-INF/wsse10.truststore
</screen><screen xml:space="preserve">[alessio@localhost trunk]$ jar -tvf output/tests/libs/jaxws-samples-news-step2-printer.jar 
     0 Fri Feb 08 18:01:14 CET 2008 META-INF/
   106 Fri Feb 08 18:01:12 CET 2008 META-INF/MANIFEST.MF
     0 Fri Feb 08 11:38:20 CET 2008 org/
     0 Fri Feb 08 11:38:20 CET 2008 org/jboss/
     0 Fri Feb 08 11:38:20 CET 2008 org/jboss/test/
     0 Fri Feb 08 11:39:50 CET 2008 org/jboss/test/ws/
     0 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/
     0 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/
     0 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/
  5464 Fri Feb 08 17:41:30 CET 2008 org/jboss/test/ws/jaxws/samples/news/Printer.class
  2324 Fri Feb 08 18:01:00 CET 2008 org/jboss/test/ws/jaxws/samples/news/SecurePrinter.class
     0 Fri Feb 08 11:39:50 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/
     0 Fri Feb 08 11:39:50 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/printer/
     0 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/printer/mtom/
  1599 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/printer/mtom/EditionMTOM.class
  1115 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/printer/mtom/NewspaperMTOMEndpoint.class
  1760 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/printer/mtom/NewspaperMTOMService.class
   958 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/printer/mtom/ObjectFactory.class
   993 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/printer/mtom/StringArray.class
   295 Fri Feb 08 11:39:50 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/printer/mtom/package-info.class
     0 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/printer/swa/
  1717 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/printer/swa/EditionSWA.class
  1108 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/printer/swa/NewspaperSWAEndpoint.class
  1746 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/printer/swa/NewspaperSWAService.class
  1896 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/printer/swa/ObjectFactory.class
   991 Fri Feb 08 11:39:52 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/printer/swa/StringArray.class
   294 Fri Feb 08 11:39:50 CET 2008 org/jboss/test/ws/jaxws/samples/news/generated/printer/swa/package-info.class
</screen><para>We basically added the secure version of endpoints and clients, as well as the required ws-security descriptors and keystores.</para><para>While running the agency client...</para><screen xml:space="preserve">wsrunclient.sh -classpath jaxws-samples-news-step2-agency.jar org.jboss.test.ws.jaxws.samples.news.SecureAgency http://localhost.localdomain:8080/news/pressRelease?wsdl title body
</screen><para>we can for example capture the request message and verify that it's encrypted and signed:</para><screen xml:space="preserve">HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
X-Powered-By: Servlet 2.4; JBoss-4.2.3.GA (build: SVNTag=JBoss_4_2_3_GA date=200801291425)/JBossWeb-2.0
Content-Type: text/xml;charset=UTF-8
Transfer-Encoding: chunked
Date: Fri, 08 Feb 2008 19:03:44 GMT

&lt;env:Envelope xmlns:env='http://schemas.xmlsoap.org/soap/envelope/'&gt;&lt;env:Header&gt;&lt;wsse:Security env:mustUnderstand='1' xmlns:wsse='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd' xmlns:wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd'&gt;&lt;wsu:Timestamp wsu:Id='timestamp'&gt;&lt;wsu:Created&gt;2008-02-08T19:03:43.991Z&lt;/wsu:Created&gt;&lt;wsu:Expires&gt;2008-02-08T19:08:43.991Z&lt;/wsu:Expires&gt;&lt;/wsu:Timestamp&gt;&lt;wsse:BinarySecurityToken EncodingType='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary' ValueType='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3' wsu:Id='token-17-1202497424002-6508395'&gt;MIIDDDCCAfSgAwIBAgIQM6YEf7FVYx/tZyEXgVComTANBgkqhkiG9w0BAQUFADAwMQ4wDAYDVQQK
DAVPQVNJUzEeMBwGA1UEAwwVT0FTSVMgSW50ZXJvcCBUZXN0IENBMB4XDTA1MDMxOTAwMDAwMFoX
DTE4MDMxOTIzNTk1OVowQjEOMAwGA1UECgwFT0FTSVMxIDAeBgNVBAsMF09BU0lTIEludGVyb3Ag
VGVzdCBDZXJ0MQ4wDAYDVQQDDAVBbGljZTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAoqi9
9By1VYo0aHrkKCNT4DkIgPL/SgahbeKdGhrbu3K2XG7arfD9tqIBIKMfrX4Gp90NJa85AV1yiNsE
yvq+mUnMpNcKnLXLOjkTmMCqDYbbkehJlXPnaWLzve+mW0pJdPxtf3rbD4PS/cBQIvtpjmrDAU8V
sZKT8DN5Kyz+EZsCAwEAAaOBkzCBkDAJBgNVHRMEAjAAMDMGA1UdHwQsMCowKKImhiRodHRwOi8v
aW50ZXJvcC5iYnRlc3QubmV0L2NybC9jYS5jcmwwDgYDVR0PAQH/BAQDAgSwMB0GA1UdDgQWBBQK
4l0TUHZ1QV3V2QtlLNDm+PoxiDAfBgNVHSMEGDAWgBTAnSj8wes1oR3WqqqgHBpNwkkPDzANBgkq
hkiG9w0BAQUFAAOCAQEABTqpOpvW+6yrLXyUlP2xJbEkohXHI5OWwKWleOb9hlkhWntUalfcFOJA
gUyH30TTpHldzx1+vK2LPzhoUFKYHE1IyQvokBN2JjFO64BQukCKnZhldLRPxGhfkTdxQgdf5rCK
/wh3xVsZCNTfuMNmlAM6lOAg8QduDah3WFZpEA0s2nwQaCNQTNMjJC8tav1CBr6+E5FAmwPXP7pJ
xn9Fw9OXRyqbRA4v2y7YpbGkG2GI9UvOHw6SGvf4FRSthMMO35YbpikGsLix3vAsXWWi4rwfVOYz
QK0OFPNi9RMCUdSH06m9uLWckiCxjos0FQODZE9l4ATGy9s9hNVwryOJTw==&lt;/wsse:BinarySecurityToken&gt;&lt;wsse:BinarySecurityToken EncodingType='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary' ValueType='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3' wsu:Id='token-14-1202497424000-24093349'&gt;MIIDCjCCAfKgAwIBAgIQYDju2/6sm77InYfTq65x+DANBgkqhkiG9w0BAQUFADAwMQ4wDAYDVQQK
DAVPQVNJUzEeMBwGA1UEAwwVT0FTSVMgSW50ZXJvcCBUZXN0IENBMB4XDTA1MDMxOTAwMDAwMFoX
DTE4MDMxOTIzNTk1OVowQDEOMAwGA1UECgwFT0FTSVMxIDAeBgNVBAsMF09BU0lTIEludGVyb3Ag
VGVzdCBDZXJ0MQwwCgYDVQQDDANCb2IwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMCquMva
4lFDrv3fXQnKK8CkSU7HvVZ0USyJtlL/yhmHH/FQXHyYY+fTcSyWYItWJYiTZ99PAbD+6EKBGbdf
uJNUJCGaTWc5ZDUISqM/SGtacYe/PD/4+g3swNPzTUQAIBLRY1pkr2cm3s5Ch/f+mYVNBR41HnBe
Ixybw25kkoM7AgMBAAGjgZMwgZAwCQYDVR0TBAIwADAzBgNVHR8ELDAqMCiiJoYkaHR0cDovL2lu
dGVyb3AuYmJ0ZXN0Lm5ldC9jcmwvY2EuY3JsMA4GA1UdDwEB/wQEAwIEsDAdBgNVHQ4EFgQUXeg5
5vRyK3ZhAEhEf+YT0z986L0wHwYDVR0jBBgwFoAUwJ0o/MHrNaEd1qqqoBwaTcJJDw8wDQYJKoZI
hvcNAQEFBQADggEBAIiVGv2lGLhRvmMAHSlY7rKLVkv+zEUtSyg08FBT8z/RepUbtUQShcIqwWse
mDU8JVtsucQLc+g6GCQXgkCkMiC8qhcLAt3BXzFmLxuCEAQeeFe8IATr4wACmEQE37TEqAuWEIan
PYIplbxYgwP0OBWBSjcRpKRAxjEzuwObYjbll6vKdFHYIweWhhWPrefquFp7TefTkF4D3rcctTfW
J76I5NrEVld+7PBnnJNpdDEuGsoaiJrwTW3Ixm40RXvG3fYS4hIAPeTCUk3RkYfUkqlaaLQnUrF2
hZSgiBNLPe8gGkYORccRIlZCGQDEpcWl1Uf9OHw6fC+3hkqolFd5CVI=&lt;/wsse:BinarySecurityToken&gt;&lt;xenc:EncryptedKey xmlns:xenc='http://www.w3.org/2001/04/xmlenc#'&gt;&lt;xenc:EncryptionMethod Algorithm='http://www.w3.org/2001/04/xmlenc#rsa-1_5' xmlns:xenc='http://www.w3.org/2001/04/xmlenc#'/&gt;&lt;ds:KeyInfo xmlns:ds='http://www.w3.org/2000/09/xmldsig#'&gt;
&lt;wsse:SecurityTokenReference wsu:Id='reference-18-1202497424003-32714846'&gt;&lt;wsse:Reference URI='#token-17-1202497424002-6508395' ValueType='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3'/&gt;&lt;/wsse:SecurityTokenReference&gt;
&lt;/ds:KeyInfo&gt;&lt;xenc:CipherData xmlns:xenc='http://www.w3.org/2001/04/xmlenc#'&gt;&lt;xenc:CipherValue xmlns:xenc='http://www.w3.org/2001/04/xmlenc#'&gt;N6udrhTegMr/BHAWHEFcqASBUYaGUaT4c+j8Ow3PJPcC86comLyTWU1cAjjgmrorKy9TdQ4cqPoI
/TwKi88yC5E/fDCojmYc1KJV3Jq3jp2j68Z+ZaopLmciiO49ySu7DKsdPL6Cc2bq6bSh6YKgOboH
8eYfo9OsoAyK8QG4oIc=&lt;/xenc:CipherValue&gt;&lt;/xenc:CipherData&gt;&lt;xenc:ReferenceList xmlns:xenc='http://www.w3.org/2001/04/xmlenc#'&gt;&lt;xenc:DataReference URI='#encrypted-16-1202497424001-26591181' xmlns:xenc='http://www.w3.org/2001/04/xmlenc#'/&gt;&lt;/xenc:ReferenceList&gt;&lt;/xenc:EncryptedKey&gt;&lt;ds:Signature xmlns:ds='http://www.w3.org/2000/09/xmldsig#'&gt;
&lt;ds:SignedInfo xmlns:ds='http://www.w3.org/2000/09/xmldsig#'&gt;
&lt;ds:CanonicalizationMethod Algorithm='http://www.w3.org/2001/10/xml-exc-c14n#' xmlns:ds='http://www.w3.org/2000/09/xmldsig#'/&gt;
&lt;ds:SignatureMethod Algorithm='http://www.w3.org/2000/09/xmldsig#rsa-sha1' xmlns:ds='http://www.w3.org/2000/09/xmldsig#'/&gt;
&lt;ds:Reference URI='#element-13-1202497423991-15458568' xmlns:ds='http://www.w3.org/2000/09/xmldsig#'&gt;
&lt;ds:Transforms xmlns:ds='http://www.w3.org/2000/09/xmldsig#'&gt;
&lt;ds:Transform Algorithm='http://www.w3.org/2001/10/xml-exc-c14n#' xmlns:ds='http://www.w3.org/2000/09/xmldsig#'/&gt;
&lt;/ds:Transforms&gt;
&lt;ds:DigestMethod Algorithm='http://www.w3.org/2000/09/xmldsig#sha1' xmlns:ds='http://www.w3.org/2000/09/xmldsig#'/&gt;
&lt;ds:DigestValue xmlns:ds='http://www.w3.org/2000/09/xmldsig#'&gt;tfTeWLN1EkJG2rkzORoSvIhOee8=&lt;/ds:DigestValue&gt;
&lt;/ds:Reference&gt;
&lt;ds:Reference URI='#timestamp' xmlns:ds='http://www.w3.org/2000/09/xmldsig#'&gt;
&lt;ds:Transforms xmlns:ds='http://www.w3.org/2000/09/xmldsig#'&gt;
&lt;ds:Transform Algorithm='http://www.w3.org/2001/10/xml-exc-c14n#' xmlns:ds='http://www.w3.org/2000/09/xmldsig#'/&gt;
&lt;/ds:Transforms&gt;
&lt;ds:DigestMethod Algorithm='http://www.w3.org/2000/09/xmldsig#sha1' xmlns:ds='http://www.w3.org/2000/09/xmldsig#'/&gt;
&lt;ds:DigestValue xmlns:ds='http://www.w3.org/2000/09/xmldsig#'&gt;c7QCbyPei07wWMAUaiNSg6lZvZ8=&lt;/ds:DigestValue&gt;
&lt;/ds:Reference&gt;
&lt;/ds:SignedInfo&gt;
&lt;ds:SignatureValue xmlns:ds='http://www.w3.org/2000/09/xmldsig#'&gt;
Gib/sFAZQPX1cKtVp3UHbLr275lkOESbRRW/ShX6VVgJRgXaJlqEvzZzbHyzNh8XJdatsP2RJlOs
A3/By6aejJLPU8bTmb9j2KMUkFid8arvLyF5ezNZc3/YHF+UNjH6JjK1lKwqjE8WF0i4sBFXzUkP
oGMTkdDaNyLtqYJa+7k=
&lt;/ds:SignatureValue&gt;
&lt;ds:KeyInfo xmlns:ds='http://www.w3.org/2000/09/xmldsig#'&gt;
&lt;wsse:SecurityTokenReference wsu:Id='reference-15-1202497424000-2041959'&gt;&lt;wsse:Reference URI='#token-14-1202497424000-24093349' ValueType='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3'/&gt;&lt;/wsse:SecurityTokenReference&gt;
&lt;/ds:KeyInfo&gt;
&lt;/ds:Signature&gt;&lt;/wsse:Security&gt;&lt;/env:Header&gt;&lt;env:Body xmlns:wsu='http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd' wsu:Id='element-13-1202497423991-15458568'&gt;&lt;xenc:EncryptedData Id='encrypted-16-1202497424001-26591181' Type='http://www.w3.org/2001/04/xmlenc#Content' xmlns:xenc='http://www.w3.org/2001/04/xmlenc#'&gt;&lt;xenc:EncryptionMethod Algorithm='http://www.w3.org/2001/04/xmlenc#aes128-cbc' xmlns:xenc='http://www.w3.org/2001/04/xmlenc#'/&gt;
&lt;xenc:CipherData xmlns:xenc='http://www.w3.org/2001/04/xmlenc#'&gt;&lt;xenc:CipherValue xmlns:xenc='http://www.w3.org/2001/04/xmlenc#'&gt;Wwt17Rt46aEabjJJdir8wTgm+UGkjb4KL5xTlei8GPZHBFfICxdg30HexJHqncjTaGjfx+Z7VFeN
YxFboMBGjCCln7WqcLZBKUmVffAr/gzMod4OAkMUER2T/GhhQp1hyZH2eo65pgy5slA4dHN5une7
+LuSev4VQRGazsmHOv2ObI4fMUEdD9D/Luvt/WwvmNHd/dyvzBybEZOBuqsZLZA6hzEwWKp6JK0B
TPiYvRyledLYDtAuZzVTWa70qIOdBlJpTbFmvY3CWZaxXtHWiRTX9I+x88N8hyf/HYbTb3nV+5ZE
DZgcKjG8fMxF6nGPfcfXr5lm6GqlME4B4ImCPb9AtZqjVKyX3MO166hVLsy0EiqPbiikyWBD07p4
hbKs1X8n+m9M3SdAVtEeh50zqzpIp96lKlbHmwZ27wro6KQ=
&lt;/xenc:CipherValue&gt;
&lt;/xenc:CipherData&gt;
&lt;/xenc:EncryptedData&gt;
&lt;/env:Body&gt;&lt;/env:Envelope&gt;</screen><para>Instead the MTOM/XOP printer client can be run this way...</para><screen xml:space="preserve">wsrunclient.sh -classpath jaxws-samples-news-step2-printer.jar -Djavax.net.ssl.trustStore=my.truststore -Djavax.net.ssl.trustStorePassword=changeit org.jboss.test.ws.jaxws.samples.news.SecurePrinter http://localhost.localdomain:8080/news/newspaper/mtom?wsdl
</screen><para>... and of course we can't see the messages' contents due to the SSL encryption.</para></section>
</section></chapter>