<?xml version="1.0" encoding="UTF-8"?>

<!-- ============================================================ -->
<!--  JBoss, the OpenSource J2EE webOS                            -->
<!--  Distributable under LGPL license.                           -->
<!--  See terms of license at http://www.gnu.org.                 -->
<!-- ============================================================ -->

<!-- $Id$ -->

<project default="main" basedir="." name="JBossWS-Tests">
  
  <import file="${basedir}/ant-import/build-thirdparty.xml"/>
  
  <property file="${basedir}/ant.properties"/>
  <property file="${basedir}/version.properties"/>
  
  <property name="tests.dir" value="${basedir}"/>
  <property name="tests.etc.dir" value="${tests.dir}/src/main/etc"/>
  <property name="tests.lib.dir" value="${tests.dir}/lib"/>
  <property name="tests.java.dir" value="${tests.dir}/src/main/java"/>
  <property name="tests.resources.dir" value="${tests.dir}/src/main/resources"/>
  <property name="tests.output.dir" value="${tests.dir}/output"/>
  
  <property name="thirdparty.dir" value="${basedir}/thirdparty"/>
  
  <!-- ================================================================== -->
  <!-- Setup                                                              -->
  <!-- ================================================================== -->
  
  <!-- JDK Detection -->
  <available classname="java.lang.StackTraceElement" property="HAVE_JDK_1.4"/>
  <available classname="java.lang.Enum" property="HAVE_JDK_1.5"/>

  <!-- Force thirdparty get -->
  <condition property="force.thirdparty.get">
    <not>
      <available file="${thirdparty.dir}" type="dir"/>
    </not>
  </condition>
  
  <!-- Use -Ddebug=true for remote debugging -->
  <condition property="remote.debug.line" value="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5006">
    <isset property="debug"/>
  </condition>
  <condition property="remote.debug.line" value="">
    <not>
      <isset property="debug"/>
    </not>
  </condition>
  
  <!-- Available integration target -->
  <property name="integration.target.${jbossws.integration.target}" value="true"/>
	
  <!-- Define jboss.home -->
  <condition property="jboss.home" value="${jboss50.home}">
    <equals arg1="${jbossws.integration.target}" arg2="jboss50"/>
  </condition>
  <condition property="jboss.home" value="${jboss42.home}">
    <equals arg1="${jbossws.integration.target}" arg2="jboss42"/>
  </condition>
  <condition property="jboss.home" value="${jboss40.home}">
    <equals arg1="${jbossws.integration.target}" arg2="jboss40"/>
  </condition>
  
  <!-- Integration Target Server -->
  <condition property="jbossws.integration.target.jboss">
    <isset property="jboss.home"/>
  </condition>
  <condition property="jbossws.integration.target.tomcat">
    <equals arg1="${jbossws.integration.target}" arg2="tomcat"/>
  </condition>
  
  <property name="jboss.client" value="${jboss.home}/client"/>
  <property name="jboss.lib" value="${jboss.home}/lib"/>
  <property name="jboss.server" value="${jboss.home}/server/${jboss.server.instance}"/>
  <property name="jboss.server.lib" value="${jboss.server}/lib"/>
  <property name="jboss.server.deploy" value="${jboss.server}/deploy"/>
  
  <!-- Java Endorsed -->
  <condition property="endorsed.dirs" value="${jboss.home}/lib/endorsed">
    <isset property="jbossws.integration.target.jboss"/>
  </condition>
  <condition property="endorsed.dirs" value="${tomcat.home}/common/endorsed">
    <isset property="jbossws.integration.target.tomcat"/>
  </condition>
  
  <!-- Set a hostname property based on COMPUTERNAME for win32, HOSTNAME
  otherwise and initialize the node0/node1 cluster hostnames to localhost
  and ${hostname} by default. If you cannot route multicast traffic between
  localhost and hostname, then you need to specify node0 and node1 binding
  in the local.properties that can in order to be able to run the clustering
  tests.
  -->
  <property environment="env"/>
  <condition property="hostname" value="${env.COMPUTERNAME}">
    <os family="windows"/>
  </condition>
  <condition property="hostname" value="${env.HOSTNAME}">
    <not>
      <os family="windows"/>
    </not>
  </condition>
  
  <!-- node0 defaults -->
  <property name="node0" value="localhost"/>
  <property name="node0.http.url" value="http://${node0}:8080"/>
  <property name="node0.jndi.url" value="jnp://${node0}:1099"/>
  <property name="node0.hajndi.url" value="jnp://${node0}:1100"/>
  
  <!-- ================================================================== -->
  <!-- Initialization                                                     -->
  <!-- ================================================================== -->
  
  <target name="prepare">
    
    <mkdir dir="${tests.output.dir}/log"/>
    <touch file="${tests.output.dir}/log/test.log"/>
    
    <tstamp>
      <format property="build.id" pattern="yyyyMMddHHmm"/>
    </tstamp>
    
    <!-- Define excluded tests -->
    <condition property="excludes-short-name" value="tests-${jbossws.integration.target}-excludes.txt">
      <or>
        <available file="${jboss.client}/jboss-ejb3-client.jar"/>
        <isset property="integration.target.tomcat"/>
      </or>
    </condition>
    <property name="excludes-short-name" value="tests-${jbossws.integration.target}-noejb3-excludes.txt"/>
    <property name="excludesfile" value="${tests.resources.dir}/${excludes-short-name}"/>
    
    <echo/>
    <echo message="-----------------------------------------------"/>
    <echo message="jboss.home   = ${jboss.home}"/>
    <echo message="tomcat.home  = ${tomcat.home}"/>
    <echo message="java.home    = ${java.home}"/>
    <echo message="endorsed     = ${endorsed.dirs}"/>
    <echo message="excludesfile = ${excludes-short-name}"/>
    <echo message="-----------------------------------------------"/>
    
  </target>
  
  <!--
  Init the various classpaths
  -->
  <target name="init" depends="prepare,jboss-classpath,tomcat-classpath"/>
  
  <target name="common-classpath" depends="prepare,thirdparty">
    
    <!-- The combined compile classpath -->
    <path id="jbossws.jars.classpath">
      <pathelement location="${tests.lib.dir}/jbossws-client.jar"/>
      <pathelement location="${tests.lib.dir}/jboss-jaxrpc.jar"/>
      <pathelement location="${tests.lib.dir}/jboss-jaxws.jar"/>
      <pathelement location="${tests.lib.dir}/jboss-saaj.jar"/>
      <pathelement location="${tests.lib.dir}/jbossws-jboss50-integration.jar"/> 
      <pathelement location="${tests.lib.dir}/jbossws-jboss42-integration.jar"/> 
      <pathelement location="${tests.lib.dir}/jbossws-jboss40-integration.jar"/> 
      <pathelement location="${tests.lib.dir}/jbossws-tomcat-integration.jar"/> 
    </path>
    
    <!-- The combined compile classpath -->
    <path id="javac.classpath">
      <path refid="core.classpath"/>
      <path refid="jbossws.jars.classpath"/>
      <pathelement location="${thirdparty.dir}/activation.jar"/>
      <pathelement location="${thirdparty.dir}/jboss-vfs.jar"/>
      <pathelement location="${thirdparty.dir}/junit.jar"/>
      <pathelement location="${thirdparty.dir}/mail.jar"/>
      <pathelement location="${thirdparty.dir}/qdox.jar"/>
      <pathelement location="${thirdparty.dir}/policy.jar"/>
      <pathelement location="${thirdparty.dir}/servlet-api.jar"/>
      <pathelement location="${thirdparty.dir}/stax-api.jar"/>
      <pathelement location="${thirdparty.dir}/xmlunit1.0.jar"/>
      <pathelement location="${jboss.client}/jboss-ejb3-client.jar"/>
    </path>
  </target>
  
  <target name="jboss-classpath" depends="common-classpath" if="jbossws.integration.target.jboss">
    
    <!-- The test client classpath -->
    <path id="test.client.classpath">
      <path refid="jbossws.jars.classpath"/>
      <pathelement location="${jboss.client}/commons-logging.jar"/>
      <pathelement location="${jboss.client}/jboss-backport-concurrent.jar"/>
      <pathelement location="${jboss.client}/jboss-ejb3-client.jar"/>
      <pathelement location="${jboss.client}/jboss-aop-jdk50-client.jar"/>
      <pathelement location="${jboss.client}/jboss-aspect-jdk50-client.jar"/>
      <pathelement location="${jboss.client}/jbossretro-rt.jar"/>
      <pathelement location="${jboss.client}/log4j.jar"/>
      <pathelement location="${jboss.client}/jbossall-client.jar"/>
      <pathelement location="${jboss.lib}/jboss-vfs.jar"/> 
      <pathelement location="${jboss.server.lib}/hibernate3.jar"/>
      <pathelement location="${jboss.server.lib}/jboss.jar"/> 
      <pathelement location="${jboss.server.lib}/jbosssx.jar"/> 
      <pathelement location="${jboss.server.lib}/jbosssx.jar"/> 
      <path refid="javac.classpath"/>
    </path>
    
    <!-- The jBPM BPEL classpath -->
    <path id="jbpm.bpel.classpath">
      <path refid="jbossws.jars.classpath"/>
      <pathelement location="${thirdparty.dir}/jbpm-bpel"/> <!-- jbpm.cfg.xml -->
      <pathelement location="${thirdparty.dir}/jbpm-bpel/jbpm-bpel.jar" />
      <pathelement location="${thirdparty.dir}/jbpm-bpel/jbpm-jpdl.jar" />
      <pathelement location="${thirdparty.dir}/jbpm-bpel/commons-lang.jar" />
      <pathelement location="${thirdparty.dir}/jbpm-bpel/jaxen.jar" />
      <pathelement location="${thirdparty.dir}/commons-collections.jar"/>
      <pathelement location="${thirdparty.dir}/commons-logging.jar"/>
      <pathelement location="${thirdparty.dir}/dom4j.jar"/>
      <pathelement location="${thirdparty.dir}/wsdl4j.jar"/>
      <pathelement location="${thirdparty.dir}/jboss-logging-log4j.jar"/>
      <!--
      <pathelement location="${thirdparty.dir}/log4j.jar"/>
      <pathelement location="${tests.etc.dir}"/>
      -->
    </path>
  </target>
  
  <target name="tomcat-classpath" depends="common-classpath" if="jbossws.integration.target.tomcat">
    <!-- The test client classpath -->
    <path id="test.client.classpath">
      <path refid="jbossws.jars.classpath"/>
      <pathelement location="${tomcat.common.lib}/jbossws-thirdparty.jar"/> 
      <path refid="javac.classpath"/>
    </path>
  </target>
  
  
  <!-- ================================================================== -->
  <!-- Compiling                                                          -->
  <!-- ================================================================== -->
  
  <target name="compile" depends="compile14,compile15" description="Compile sources"/>
  
  <target name="compile14" depends="init" unless="HAVE_JDK_1.5">
    <mkdir dir="${tests.output.dir}/classes"/>
    <javac destdir="${tests.output.dir}/classes" debug="${javac.debug}" encoding="utf-8" verbose="${javac.verbose}" deprecation="${javac.deprecation}"
      failonerror="${javac.fail.onerror}" excludesfile="${excludesfile}">
      <src path="${tests.java.dir}"/>
      <exclude name="org/jboss/test/ws/jaxws/**"/>
      <exclude name="org/jboss/test/ws/tools/jsr181/**"/>
      <classpath refid="javac.classpath"/>
    </javac>
  </target>
  
  <target name="compile15" depends="init" if="HAVE_JDK_1.5">
    <mkdir dir="${tests.output.dir}/classes"/>
    <javac destdir="${tests.output.dir}/classes" debug="${javac.debug}" encoding="utf-8" verbose="${javac.verbose}" deprecation="${javac.deprecation}"
      failonerror="${javac.fail.onerror}" excludesfile="${excludesfile}">
      <src path="${tests.java.dir}"/>
      <classpath refid="javac.classpath"/>
    </javac>
  </target>
  
  <target name="compile-generated" depends="init" description="Compile generated sources">
    <mkdir dir="${tests.output.dir}/classes"/>
    <javac destdir="${tests.output.dir}/classes" debug="${javac.debug}" encoding="utf-8" verbose="${javac.verbose}" deprecation="${javac.deprecation}" failonerror="${javac.fail.onerror}">
      <src path="${tests.output.dir}/wstools/java"/>
      <exclude name="org/jboss/test/ws/interop/**"/>
      <classpath refid="javac.classpath"/>
    </javac>
  </target>
  
  <target name="copy-resources" depends="init" description="Copy the deployment resources.">
    <copy todir="${tests.output.dir}/classes" file="${tests.etc.dir}/jndi.properties"/>
    <copy todir="${tests.output.dir}/classes" file="${tests.etc.dir}/log4j.xml"/>
    <!-- Copy resources -->
    <copy todir="${tests.output.dir}/resources">
      <fileset dir="${tests.resources.dir}">
        <include name="**/*.wsdl"/>
        <include name="**/*.xml"/>
        <exclude name="jaxrpc/samples-override/**"/>
      </fileset>
      <filterset>
        <filter token="jbosstest.host.name" value="${node0}"/>
        <filter token="wsdl-publish-location" value="${tests.output.dir}/wsdl-publish"/>
      </filterset>
    </copy>
    <!-- Copy binary files -->
    <copy todir="${tests.output.dir}/resources">
      <fileset dir="${tests.resources.dir}">
        <exclude name="**/*.wsdl"/>
        <exclude name="**/*.xml"/>
      </fileset>
    </copy>
  </target>
  
  <!-- ================================================================== -->
  <!-- Building                                                           -->
  <!-- ================================================================== -->
  
  <target name="main" depends="compile,copy-resources,generate-sources,compile-generated,copy-generated" description="Build the deployments.">
    <ant antfile="${basedir}/ant-import/build-samples-jaxrpc.xml" target="build-samples-jaxrpc" inheritall="true"/>
    <ant antfile="${basedir}/ant-import/build-samples-jaxws.xml" target="build-samples-jaxws" inheritall="true"/>
  </target>
  
  <!--
  Generate samples sources
  -->
  <target name="generate-sources" depends="compile" description="Generate the deployment resources.">
    <!-- create jbpm process archives -->
	  <mkdir dir="${tests.output.dir}/libs"/>
    <zip destfile="${tests.output.dir}/libs/jaxrpc-samples-wsbpel-hello-process.zip">
      <fileset dir="${tests.resources.dir}/jaxrpc/samples/wsbpel/hello/bpel" />
    </zip>
    <!-- Copy the BPEL sar -->
    <copy file="${thirdparty.dir}/jbpm-bpel.sar" todir="${tests.output.dir}/libs"/>

	  <!-- generate wsdl binding and service definitions for bpel processes -->
    <taskdef name="servicegen" classname="org.jbpm.bpel.ant.ServiceGeneratorTask">
      <classpath refid="jbpm.bpel.classpath"/>
    </taskdef>
    <servicegen processfile="${tests.output.dir}/libs/jaxrpc-samples-wsbpel-hello-process.zip"
      outputdir="${tests.output.dir}/wstools/resources/jaxrpc/samples/wsbpel/hello/WEB-INF/wsdl"
      bindingfile="hello-binding-.wsdl" servicefile="hello-service.wsdl" />
	
	  <!-- generate mapping artifacts -->
    <taskdef name="wstools" classname="org.jboss.ws.tools.ant.wstools">
      <classpath refid="core.classpath"/>
      <classpath location="${tests.lib.dir}/jbossws-client.jar"/>
      <classpath location="${thirdparty.dir}/concurrent.jar"/>
      <classpath location="${tests.output.dir}/classes"/>
      <classpath location="${tests.output.dir}"/>
    </taskdef>    
    <mkdir dir="${tests.output.dir}/libs"/>
    <mkdir dir="${tests.output.dir}/wstools/java"/>
    <wstools dest="${tests.output.dir}/wstools/resources/jaxrpc/samples/docstyle/wrapped/WEB-INF" config="${tests.resources.dir}/jaxrpc/samples/docstyle/wrapped/wstools-config.xml"/>
    <wstools dest="${tests.output.dir}/wstools/resources/jaxrpc/samples/docstyle/bare/WEB-INF" config="${tests.resources.dir}/jaxrpc/samples/docstyle/bare/wstools-config.xml"/>
    <wstools dest="${tests.output.dir}/wstools/resources/jaxrpc/samples/dynamichandler/WEB-INF" config="${tests.resources.dir}/jaxrpc/samples/dynamichandler/wstools-config.xml"/>
    <wstools dest="${tests.output.dir}/wstools/resources/jaxrpc/samples/exception/WEB-INF" config="${tests.resources.dir}/jaxrpc/samples/exception/wstools-config.xml"/>
    <wstools dest="${tests.output.dir}/wstools/resources/jaxrpc/samples/handler/WEB-INF" config="${tests.resources.dir}/jaxrpc/samples/handler/wstools-config.xml"/>
    <wstools dest="${tests.output.dir}/wstools/resources/jaxrpc/samples/holder/WEB-INF" config="${tests.resources.dir}/jaxrpc/samples/holder/wstools-config.xml"/>
    <wstools dest="${tests.output.dir}/wstools/resources/jaxrpc/samples/jmstransport/META-INF" config="${tests.resources.dir}/jaxrpc/samples/jmstransport/wstools-config.xml"/>
    <wstools dest="${tests.output.dir}/wstools/resources/jaxrpc/samples/jsr109ejb/doclit/META-INF" config="${tests.resources.dir}/jaxrpc/samples/jsr109ejb/doclit/wstools-config.xml"/>
    <wstools dest="${tests.output.dir}/wstools/resources/jaxrpc/samples/jsr109ejb/rpclit/META-INF" config="${tests.resources.dir}/jaxrpc/samples/jsr109ejb/rpclit/wstools-config.xml"/>
    <wstools dest="${tests.output.dir}/wstools/resources/jaxrpc/samples/jsr109pojo/doclit/WEB-INF" config="${tests.resources.dir}/jaxrpc/samples/jsr109pojo/doclit/wstools-config.xml"/>
    <wstools dest="${tests.output.dir}/wstools/resources/jaxrpc/samples/jsr109pojo/rpclit/WEB-INF" config="${tests.resources.dir}/jaxrpc/samples/jsr109pojo/rpclit/wstools-config.xml"/>
    <wstools dest="${tests.output.dir}/wstools/resources/jaxrpc/samples/message/WEB-INF" config="${tests.resources.dir}/jaxrpc/samples/message/wstools-config.xml"/>
    <wstools dest="${tests.output.dir}/wstools/resources/jaxrpc/samples/oneway/WEB-INF" config="${tests.resources.dir}/jaxrpc/samples/oneway/wstools-config.xml"/>
    <wstools dest="${tests.output.dir}/wstools/resources/jaxrpc/samples/rpcstyle/WEB-INF" config="${tests.resources.dir}/jaxrpc/samples/rpcstyle/wstools-config.xml"/>
    <wstools dest="${tests.output.dir}/wstools/resources/jaxrpc/samples/secureejb/META-INF" config="${tests.resources.dir}/jaxrpc/samples/secureejb/wstools-config.xml"/>
    <wstools dest="${tests.output.dir}/wstools/resources/jaxrpc/samples/wsbpel/hello/WEB-INF" config="${tests.resources.dir}/jaxrpc/samples/wsbpel/hello/wstools-config.xml" />
    <wstools dest="${tests.output.dir}/wstools/resources/jaxrpc/samples/wssecurity/WEB-INF" config="${tests.resources.dir}/jaxrpc/samples/wssecurity/wstools-config.xml"/>
    <move todir="${tests.output.dir}/wstools/java">
      <fileset dir="${tests.output.dir}/wstools/resources/jaxrpc/samples/docstyle/wrapped/WEB-INF" includes="org/**"/>
    </move>
  </target>
  
  <target name="copy-generated" depends="init" description="Copy the deployment resources.">
    <!-- Copy generated resources -->
    <copy todir="${tests.output.dir}/resources">
      <fileset dir="${tests.output.dir}/wstools/resources">
        <include name="**/*.wsdl"/>
        <include name="**/*.xml"/>
      </fileset>
    </copy>
    <!-- Copy resources that cannot (yet) be generated -->
    <copy todir="${tests.output.dir}/resources/jaxrpc/samples" overwrite="true">
      <fileset dir="${tests.resources.dir}/jaxrpc/samples-override"/>
      <filterset>
        <filter token="jbosstest.host.name" value="${node0}"/>
      </filterset>
    </copy>
  </target>
  
  <!-- ================================================================== -->
  <!-- Testing                                                            -->
  <!-- ================================================================== -->
  
  <!-- Run all unit tests and generate a report -->
  <target name="tests" depends="main" description="Run all unit tests and generate a report">
    <antcall target="tests-main">
      <param name="include.wildcard" value="org/jboss/test/ws/**/*TestCase.class"/>
    </antcall>
    <antcall target="tests-report"/>
  </target>
  
  <!--
     Run a collection of unit tests.
     ant -Dtest=tools test
  -->
  <target name="test" depends="init" if="test" description="Run all unit tests in a given directory">
    <antcall target="tests-main">
      <param name="include.wildcard" value="org/jboss/test/ws/${test}/**/*TestCase.class"/>
    </antcall>
  </target>
  
  <!-- Common test target -->
  <target name="tests-main" depends="init">
    <mkdir dir="${tests.output.dir}/reports"/>
    <junit printsummary="yes" showoutput="yes" dir="${tests.output.dir}">
      <jvmarg value="-Djava.security.manager"/>
      <sysproperty key="build.testlog" value="${tests.output.dir}/log"/>
      <sysproperty key="client.scenario" value="${client.scenario}"/>
      <sysproperty key="java.endorsed.dirs" value="${endorsed.dirs}"/>
      <sysproperty key="java.naming.provider.url" value="${node0.jndi.url}"/>
      <sysproperty key="java.protocol.handler.pkgs" value="org.jboss.virtual.protocol"/>
      <sysproperty key="java.security.policy" value="${tests.etc.dir}/tst.policy"/>
      <sysproperty key="jboss.home" value="${jboss.home}"/>
      <sysproperty key="jbosstest.host.name" value="${node0}"/>
      <sysproperty key="jbossws.integration.target" value="${jbossws.integration.target}"/>
      <sysproperty key="tomcat.home" value="${tomcat.home}"/>
      <sysproperty key="tomcat.manager.password" value="${tomcat.manager.password}"/>
      <sysproperty key="tomcat.manager.username" value="${tomcat.manager.username}"/>
      <sysproperty key="org.jboss.ws.wsse.keyStore" value="${tests.resources.dir}/jaxrpc/wsse/wsse.keystore"/>
      <sysproperty key="org.jboss.ws.wsse.trustStore" value="${tests.resources.dir}/jaxrpc/wsse/wsse.truststore"/>
      <sysproperty key="org.jboss.ws.wsse.keyStorePassword" value="jbossws"/>
      <sysproperty key="org.jboss.ws.wsse.trustStorePassword" value="jbossws"/>
      <sysproperty key="org.jboss.ws.wsse.keyStoreType" value="jks"/>
      <sysproperty key="org.jboss.ws.wsse.trustStoreType" value="jks"/>
      <classpath>
        <path refid="test.client.classpath"/>
        <pathelement location="${tests.output.dir}/classes"/>
      </classpath>
      <formatter type="plain" usefile="true"/>
      <formatter type="xml" usefile="true"/>
      <batchtest todir="${tests.output.dir}/reports" fork="true">
        <fileset dir="${tests.output.dir}/classes" includes="${include.wildcard}" excludesfile="${excludesfile}"/>
      </batchtest>
    </junit>
  </target>
  
  <!--
     Run a single unit test.
     ant -Dtest=org.jboss.test.ws.jaxrpc.samples.jsr109pojo.RpcJSETestCase one-test
  -->
  <target name="one-test" depends="init" if="test" description="Run a single unit test">
    <mkdir dir="${tests.output.dir}/reports"/>
    <junit printsummary="yes" showoutput="yes" dir="${tests.output.dir}">
      <jvmarg line="${remote.debug.line}"/>
      <jvmarg value="-Djava.security.manager"/>
      <sysproperty key="build.testlog" value="${tests.output.dir}/log"/>
      <sysproperty key="client.scenario" value="${client.scenario}"/>
      <sysproperty key="java.endorsed.dirs" value="${endorsed.dirs}"/>
      <sysproperty key="java.naming.provider.url" value="${node0.jndi.url}"/>
      <sysproperty key="java.protocol.handler.pkgs" value="org.jboss.virtual.protocol"/>
      <sysproperty key="java.security.policy" value="${tests.etc.dir}/tst.policy"/>
      <sysproperty key="jboss.home" value="${jboss.home}"/>
      <sysproperty key="jbosstest.host.name" value="${node0}"/>
      <sysproperty key="jbossws.integration.target" value="${jbossws.integration.target}"/>
      <sysproperty key="tomcat.home" value="${tomcat.home}"/>
      <sysproperty key="tomcat.manager.password" value="${tomcat.manager.password}"/>
      <sysproperty key="tomcat.manager.username" value="${tomcat.manager.username}"/>
      <!--
      http://jira.jboss.com/jira/browse/JBWS-917
      <sysproperty key="javax.net.ssl.keyStore" value="${tests.resources.dir}/jaxrpc/wsse/wsse.keystore"/>
      <sysproperty key="javax.net.ssl.trustStore" value="${tests.resources.dir}/jaxrpc/wsse/wsse.truststore"/>
      <sysproperty key="javax.net.ssl.keyStorePassword" value="jbossws"/>
      <sysproperty key="javax.net.ssl.trustStorePassword" value="jbossws"/>
      <sysproperty key="javax.net.ssl.keyStoreType" value="jks"/>
      <sysproperty key="javax.net.ssl.trustStoreType" value="jks"/>
      -->
      <!-- HTTPS hostname wrong:  should be <localhost> -->
      <sysproperty key="org.jboss.security.ignoreHttpsHost" value="true"/>
      <sysproperty key="org.jboss.ws.wsse.keyStore" value="${tests.resources.dir}/jaxrpc/wsse/wsse.keystore"/>
      <sysproperty key="org.jboss.ws.wsse.trustStore" value="${tests.resources.dir}/jaxrpc/wsse/wsse.truststore"/>
      <sysproperty key="org.jboss.ws.wsse.keyStorePassword" value="jbossws"/>
      <sysproperty key="org.jboss.ws.wsse.trustStorePassword" value="jbossws"/>
      <sysproperty key="org.jboss.ws.wsse.keyStoreType" value="jks"/>
      <sysproperty key="org.jboss.ws.wsse.trustStoreType" value="jks"/>
      <classpath>
        <path refid="test.client.classpath"/>
        <pathelement location="${tests.output.dir}/classes"/>
      </classpath>
      <formatter type="plain" usefile="true"/>
      <formatter type="xml" usefile="true"/>
      <test todir="${tests.output.dir}/reports" name="${test}" fork="true"/>
    </junit>
  </target>
  
  <!-- ================================================================== -->
  <!-- Reporting                                                          -->
  <!-- ================================================================== -->
  
  <!-- Build the tests report -->
  <target name="tests-report" depends="init" description="Build the tests report">
    <junitreport todir="${tests.output.dir}/reports">
      <fileset dir="${tests.output.dir}/reports">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${tests.output.dir}/reports/html"/>
    </junitreport>
    <zip destfile="${tests.output.dir}/test-report-${build.id}.zip">
      <fileset dir="${tests.output.dir}" includes="reports/**"/>
    </zip>
  </target>
  
  <!-- ================================================================== -->
  <!-- Cleaning                                                           -->
  <!-- ================================================================== -->
  
  <target name="clean" description="Delete all generated test files.">
    <delete dir="${tests.output.dir}"/>
  </target>
  
</project>
