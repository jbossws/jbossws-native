<?xml version="1.0" encoding="UTF-8"?>

<!-- $Id$ -->

<project>
  
  <import file="${basedir}/common/build-thirdparty.xml"/>
  
  <!-- Prepare-->
  <target name="prepare">
    
    <property file="${basedir}/ant.properties"/>
    <property file="${basedir}/version.properties"/>
    
    <property name="common.java" value="${basedir}/common/java"/>
    <property name="common.resources" value="${basedir}/common/resources"/>
    <property name="build.tests.dir" value="${basedir}/output"/>
    <property name="thirdparty.dir" value="${basedir}/thirdparty"/>
    <property name="lib.dir" value="${basedir}/lib"/>
    
    <!-- Force Thirdparty Get -->
    <condition property="force.thirdparty.get">
      <not>
        <available file="${thirdparty.dir}" type="dir"/>
      </not>
    </condition>
      
    <!-- Define jboss.home -->
    <condition property="jboss.home" value="${jboss50.home}">
      <equals arg1="${jbossws.integration.target}" arg2="jboss50"/>
    </condition>
    <condition property="jboss.home" value="${jboss42.home}">
      <equals arg1="${jbossws.integration.target}" arg2="jboss42"/>
    </condition>
    <condition property="jboss.home" value="${jboss40.home}">
      <equals arg1="${jbossws.integration.target}" arg2="jboss40"/>
    </condition>
      
    <!-- Integration Target Server -->
    <condition property="integration.target.jboss">
      <isset property="jboss.home"/>
    </condition>
    <condition property="integration.target.tomcat">
      <equals arg1="${jbossws.integration.target}" arg2="tomcat"/>
    </condition>
      
    <!-- Java Endorsed -->
    <condition property="endorsed.dirs" value="${jboss.home}/lib/endorsed">
      <isset property="integration.target.jboss"/>
    </condition>
    <condition property="endorsed.dirs" value="${tomcat.home}/common/endorsed">
      <isset property="integration.target.tomcat"/>
    </condition>
    
    <!-- Set a hostname property based on COMPUTERNAME for win32, HOSTNAME
    otherwise and initialize the node0/node1 cluster hostnames to localhost
    and ${hostname} by default. If you cannot route multicast traffic between
    localhost and hostname, then you need to specify node0 and node1 binding
    in the local.properties that can in order to be able to run the clustering
    tests.
    -->
    <property environment="env"/>
    <condition property="hostname" value="${env.COMPUTERNAME}">
      <os family="windows"/>
    </condition>
    <condition property="hostname" value="${env.HOSTNAME}">
      <not>
        <os family="windows"/>
      </not>
    </condition>
    
    <!-- node0 defaults -->
    <property name="node0" value="${hostname}"/>
    <property name="node0.http.url" value="http://${node0}:8080"/>
    <property name="node0.jndi.url" value="jnp://${node0}:1099"/>
    
    <!-- Use -Ddebug=true for client debugging -->
    <condition property="remote.debug.line" value="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5006">
      <isset property="debug"/>
    </condition>
    <condition property="remote.debug.line" value="">
      <not>
        <isset property="debug"/>
      </not>
    </condition>
    
  </target>
  
  <!-- Init-->
  <target name="init" depends="prepare,check-jboss,check-tomcat">
    
    <echo message="jboss.home   = ${jboss.home}"/>
    <echo message="tomcat.home  = ${tomcat.home}"/>
    <echo message="java.home    = ${java.home}"/>
    <echo message="node0        = ${node0}"/>
    <echo/>
    <echo message="***************************"/>
    <echo message="* ${chapter}"/>
    <echo message="***************************"/>
    <echo/>
    
    <mkdir dir="${build.tests.dir}/classes"/>
    <mkdir dir="${build.tests.dir}/resources"/>
    <mkdir dir="${build.tests.dir}/reports"/>
    <mkdir dir="${build.tests.dir}/libs"/>
    <mkdir dir="${build.tests.dir}/log"/>
    <mkdir dir="${build.tests.dir}/wstools/java"/>
    <mkdir dir="${build.tests.dir}/wstools/resources"/>
    
    <touch file="${build.tests.dir}/log/samples.log"/>
    
  </target>
  
  <!-- Check JBoss -->
  <target name="check-jboss" if="integration.target.jboss">
    
    <available property="jboss.available" file="${jboss.home}/client/jboss-client.jar"/>
    <fail message="JBoss not available: ${jboss.home}" unless="jboss.available"/>
    
    <property name="jboss.lib" value="${jboss.home}/lib"/>
    <property name="jboss.client" value="${jboss.home}/client"/>
    <property name="jboss.server" value="${jboss.home}/server/${jboss.server.instance}"/>
    <property name="jboss.server.deploy" value="${jboss.server}/deploy"/>
    <property name="jboss.server.lib" value="${jboss.server}/lib"/>
    
    <!-- Define excluded tests -->
    <property name="excludes-short-name" value="tests-jboss-excludes.txt"/>
    <property name="excludesfile" value="${common.resources}/${excludes-short-name}"/>
    
  </target>
  
  <!-- Check tomcat -->
  <target name="check-tomcat" if="integration.target.tomcat">
    
    <available property="tomcat.available" file="${tomcat.home}/server/lib/catalina.jar"/>
    <condition property="cannot.use.tomcat">
      <and>
        <isset property="integration.target.tomcat"/>
        <not>
          <isset property="tomcat.available"/>
        </not>
      </and>
    </condition>
    <fail message="Tomcat not available: ${tomcat.home}" if="cannot.use.tomcat"/>
    
    <!-- Define excluded tests -->
    <property name="excludes-short-name" value="tests-tomcat-excludes.txt"/>
    <property name="excludesfile" value="${common.resources}/${excludes-short-name}"/>
    
  </target>
  
  <!-- Compile the java sources -->
  <target name="compile" depends="init,thirdparty" 
    description="compile the sources">
    <javac destdir="${build.tests.dir}/classes" classpathref="compile.classpath" debug="on" excludesfile="${excludesfile}">
      <src path="${common.java}"/>
      <src path="${java.dir}"/>
    </javac>
  </target>
  
  <!--
  Compile the generated java sources
  -->
  <target name="compile-generated" depends="init" description="compile the generated sources">
    <mkdir dir="${build.tests.dir}/classes"/>
    <javac destdir="${build.tests.dir}/classes" classpathref="compile.classpath" debug="on">
      <src path="${build.tests.dir}/wstools/java"/>
    </javac>
  </target>
  
  <!--
  Copy the resources
  -->
  <target name="copy-resources" depends="init" description="copy the resources">
    <!-- copy resource files -->
    <copy todir="${build.tests.dir}/resources/${sample.path}">
      <fileset dir="${resources.dir}">
        <include name="**/*.wsdl"/>
        <include name="**/*.xml"/>
      </fileset>
      <filterset>
        <filter token="jbosstest.host.name" value="${node0}"/>
        <filter token="wsdl-publish-location" value="${build.tests.dir}/wsdl-publish"/>
      </filterset>
    </copy>
    <!-- copy binary files -->
    <copy todir="${build.tests.dir}/resources/${sample.path}">
      <fileset dir="${resources.dir}">
        <exclude name="**/*.wsdl"/>
        <exclude name="**/*.xml"/>
      </fileset>
    </copy>
  </target>
  
  <!--
  Copy the generated resources
  -->
  <target name="copy-generated" depends="init" description="copy the resources">
    <!-- copy generated resource files -->
    <copy todir="${build.tests.dir}/resources">
      <fileset dir="${build.tests.dir}/wstools/resources">
        <include name="${sample.path}/**/*.wsdl"/>
        <include name="${sample.path}/**/*.xml"/>
      </fileset>
    </copy>
    <!-- copy override resource files -->
    <copy todir="${build.tests.dir}/resources" overwrite="true">
      <fileset dir="${common.resources}/overrides">
        <include name="${sample.path}/**/*.wsdl"/>
        <include name="${sample.path}/**/*.xml"/>
      </fileset>
      <filterset>
        <filter token="jbosstest.host.name" value="${node0}"/>
      </filterset>
    </copy>
  </target>
  
  <!--
  Run a single test
  
  ant -Dtest=org.jboss.test.ws.jaxrpc.samples.rpcstyle.TrivialServiceRpcTestCase one-test
  -->
  <target name="one-test" depends="init" if="test" description="run a single test">
    
    <junit printsummary="yes" showoutput="yes" dir="${build.tests.dir}">
      <jvmarg line="${remote.debug.line}"/>
      <sysproperty key="jboss.home" value="${jboss.home}"/>
      <sysproperty key="tomcat.home" value="${tomcat.home}"/>
      <sysproperty key="jbosstest.host.name" value="${node0}"/>
      <sysproperty key="java.naming.provider.url" value="${node0.jndi.url}"/>
      <sysproperty key="log.dir" value="${build.tests.dir}/log"/>
      <sysproperty key="java.endorsed.dirs" value="${endorsed.dirs}"/>
      <sysproperty key="jbosstest.server.host" value="${node0}"/>
      <sysproperty key="jbossws.integration.target" value="${jbossws.integration.target}"/>
      <sysproperty key="tomcat.manager.username" value="${tomcat.manager.username}"/>
      <sysproperty key="tomcat.manager.password" value="${tomcat.manager.password}"/>
      
      <sysproperty key="org.jboss.security.ignoreHttpsHost" value="true"/>
      <sysproperty key="org.jboss.ws.wsse.keyStore" value="${build.tests.dir}/resources/jaxrpc/samples/wssecurity/wsse.keystore"/>
      <sysproperty key="org.jboss.ws.wsse.trustStore" value="${build.tests.dir}/resources/jaxrpc/samples/wssecurity/wsse.truststore"/>
      <sysproperty key="org.jboss.ws.wsse.keyStorePassword" value="jbossws"/>
      <sysproperty key="org.jboss.ws.wsse.trustStorePassword" value="jbossws"/>
      <sysproperty key="org.jboss.ws.wsse.keyStoreType" value="jks"/>
      <sysproperty key="org.jboss.ws.wsse.trustStoreType" value="jks"/>
      <classpath>
        <pathelement path="${build.tests.dir}/classes"/>
        <pathelement path="${common.resources}"/>
        <path refid="tests.classpath"/>
      </classpath>
      <formatter type="plain"/>
      <formatter type="xml"/>
      <test fork="yes" todir="${build.tests.dir}/reports" name="${test}"/>
    </junit>
    
    <junitreport todir="${build.tests.dir}/reports">
      <fileset dir="${build.tests.dir}/reports">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${build.tests.dir}/reports/html"/>
    </junitreport>
  </target>
  
  <!--
  Run a test collection
  
  ant -Dtest=wssecurity test
  -->
  <target name="test" depends="init" if="test" description="run a collection of tests">
    
    <junit printsummary="yes" showoutput="yes" dir="${build.tests.dir}">
      <sysproperty key="jboss.home" value="${jboss.home}"/>
      <sysproperty key="tomcat.home" value="${tomcat.home}"/>
      <sysproperty key="jbosstest.host.name" value="${node0}"/>
      <sysproperty key="java.naming.provider.url" value="${node0.jndi.url}"/>
      <sysproperty key="log.dir" value="${build.tests.dir}/log"/>
      <sysproperty key="java.endorsed.dirs" value="${endorsed.dirs}"/>
      <sysproperty key="jbosstest.server.host" value="${node0}"/>
      <sysproperty key="jbossws.integration.target" value="${jbossws.integration.target}"/>
      <sysproperty key="tomcat.manager.username" value="${tomcat.manager.username}"/>
      <sysproperty key="tomcat.manager.password" value="${tomcat.manager.password}"/>
      
      <sysproperty key="org.jboss.security.ignoreHttpsHost" value="true"/>
      <sysproperty key="org.jboss.ws.wsse.keyStore" value="${build.tests.dir}/resources/jaxrpc/samples/wssecurity/wsse.keystore"/>
      <sysproperty key="org.jboss.ws.wsse.trustStore" value="${build.tests.dir}/resources/jaxrpc/samples/wssecurity/wsse.truststore"/>
      <sysproperty key="org.jboss.ws.wsse.keyStorePassword" value="jbossws"/>
      <sysproperty key="org.jboss.ws.wsse.trustStorePassword" value="jbossws"/>
      <sysproperty key="org.jboss.ws.wsse.keyStoreType" value="jks"/>
      <sysproperty key="org.jboss.ws.wsse.trustStoreType" value="jks"/>
      <classpath>
        <pathelement path="${build.tests.dir}/classes"/>
        <pathelement path="${common.resources}"/>
        <path refid="tests.classpath"/>
      </classpath>
      <formatter type="plain"/>
      <formatter type="xml"/>
      <batchtest fork="yes" todir="${build.tests.dir}/reports">
        <fileset dir="${java.dir}">
          <include name="org/jboss/test/ws/${test}/**/*TestCase.java"/>
        </fileset>
      </batchtest>
    </junit>
    
  </target>
  
  <!--
  Generate the test report
  -->
  <target name="tests-report" depends="init" description="generate the test report">
    <junitreport todir="${build.tests.dir}/reports">
      <fileset dir="${build.tests.dir}/reports">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${build.tests.dir}/reports/html"/>
    </junitreport>
  </target>
  
  <!--
  Main entry point
  -->
  <target name="main" depends="jars" description="main build">
  </target>
  
  <!--
  Clean the build
  -->
  <target name="clean" depends="init" description="clean the build">
    <delete dir="${build.tests.dir}"/>
  </target>
  
</project>