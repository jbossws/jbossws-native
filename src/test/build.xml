<?xml version="1.0" encoding="UTF-8"?>

<!-- ============================================================ -->
<!--  JBoss, the OpenSource J2EE webOS                            -->
<!--  Distributable under LGPL license.                           -->
<!--  See terms of license at http://www.gnu.org.                 -->
<!-- ============================================================ -->

<!-- $Id$ -->

<project name="JBossWS-Tests" default="main" basedir="../..">
  
  <import file="${basedir}/../build/import/build-thirdparty.xml"/>
  
  <!-- ================================================================== -->
  <!-- Setup                                                              -->
  <!-- ================================================================== -->
  
  <property file="${basedir}/../build/ant.properties"/>
  <property file="${basedir}/../build/version.properties"/>

  <property name="build.dir" value="${basedir}/../build/output"/>
  <property name="build.lib.dir" value="${build.dir}/lib"/>
  <property name="build.resources.dir" value="${build.dir}/resources"/>
  <property name="build.tests.dir" value="${build.dir}/tests"/>
  <property name="test.dir" value="${basedir}/src/test"/>
  <property name="test.etc.dir" value="${test.dir}/etc"/>
  <property name="test.java.dir" value="${test.dir}/java"/>
  <property name="test.resources.dir" value="${test.dir}/resources"/>
  
  <property name="thirdparty.dir" value="${basedir}/../build/thirdparty"/>
  
  <!-- JDK Detection -->
  <available classname="java.lang.StackTraceElement" property="HAVE_JDK_1.4"/>
  <available classname="java.lang.Enum" property="HAVE_JDK_1.5"/>
  
  <!-- Use -Ddebug=true for remote debugging -->
  <condition property="remote.debug.line" value="-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5006">
    <isset property="debug"/>
  </condition>
  <condition property="remote.debug.line" value="">
    <not>
      <isset property="debug"/>
    </not>
  </condition>
  
  <property name="jboss.home" value="${jboss50.home}"/>
  <property name="jboss.client" value="${jboss.home}/client"/>
  <property name="jboss.lib" value="${jboss.home}/lib"/>
  <property name="jboss.server" value="${jboss.home}/server/${jboss.server.instance}"/>
  <property name="jboss.server.lib" value="${jboss.server}/lib"/>
  <property name="jboss.server.deploy" value="${jboss.server}/deploy"/>
  
  <!-- Set a hostname property based on COMPUTERNAME for win32, HOSTNAME
  otherwise and initialize the node0/node1 cluster hostnames to localhost
  and ${hostname} by default. If you cannot route multicast traffic between
  localhost and hostname, then you need to specify node0 and node1 binding
  in the local.properties that can in order to be able to run the clustering
  tests.
  -->
  <property environment="env"/>
  <condition property="hostname" value="${env.COMPUTERNAME}">
    <os family="windows"/>
  </condition>
  <condition property="hostname" value="${env.HOSTNAME}">
    <not>
      <os family="windows"/>
    </not>
  </condition>
  
  <!-- node0 defaults -->
  <property name="node0" value="localhost"/>
  <property name="node0.http.url" value="http://${node0}:8080"/>
  <property name="node0.jndi.url" value="jnp://${node0}:1099"/>
  <property name="node0.hajndi.url" value="jnp://${node0}:1100"/>
  
  <!-- ================================================================== -->
  <!-- Initialization                                                     -->
  <!-- ================================================================== -->
  
  <target name="prepare">
    
    <echo message="-----------------------------------------------"/>
    <echo message="jboss.home  = ${jboss.home}"/>
    <echo message="tomcat.home = ${tomcat.home}"/>
    <echo message="java.home   = ${java.home}"/>
    <echo message="-----------------------------------------------"/>
    
    <available property="jbossws.available" file="${jboss.home}/client/jbossall-client.jar"/>
    <available property="installer.setup" file="jboss-ejb3-client.jar"/>
    
    <fail message="Not available: ${jboss.home}/client/jbossall-client.jar" unless="jbossws.available"/>
    
    <mkdir dir="${build.tests.dir}/log"/>
    <touch file="${build.tests.dir}/logtest.log"/>
    
    <tstamp>
      <format property="build.id" pattern="yyyyMMddHHmm"/>
    </tstamp>
    
  </target>
  
  <!--
  Init the various classpaths
  -->
  <target name="init" depends="prepare,thirdparty">
    
    <!-- Define excluded tests -->
    <condition property="tests.excludesfile" value="${test.resources.dir}/tests-no-excludes.txt">
      <equals arg1="${jbossws.target.server}" arg2="jboss"/>
    </condition>
    <condition property="tests.excludesfile" value="${test.resources.dir}/tests-tomcat-excludes.txt">
      <equals arg1="${jbossws.target.server}" arg2="tomcat"/>
    </condition>
    
    <!-- The jbossws client classpath -->
    <path id="jbossws.client.classpath">
      <pathelement location="${build.lib.dir}/jbossws-client.jar"/>
      <pathelement location="${jboss.client}/activation.jar"/>
      <pathelement location="${jboss.client}/commons-logging.jar"/>
      <pathelement location="${jboss.client}/javassist.jar"/>
      <pathelement location="${jboss.client}/jaxb-api.jar"/>
      <pathelement location="${jboss.client}/jaxb-impl.jar"/>
      <pathelement location="${jboss.client}/jbossall-client.jar"/>
      <pathelement location="${jboss.client}/jboss-common-core.jar"/>
      <pathelement location="${jboss.client}/jboss-xml-binding.jar"/>
      <pathelement location="${jboss.client}/jboss-logging-spi.jar"/>
      <pathelement location="${jboss.client}/jboss-logging-log4j.jar"/>
      <pathelement location="${jboss.client}/${jbossws.client.jar}"/>
      <pathelement location="${jboss.client}/jboss-jaxrpc.jar"/>
      <pathelement location="${jboss.client}/jboss-jaxws.jar"/>
      <pathelement location="${jboss.client}/jboss-saaj.jar"/>
      <pathelement location="${jboss.client}/log4j.jar"/>
      <pathelement location="${jboss.client}/mail.jar"/>
      <pathelement location="${jboss.lib}/jboss-container.jar"/>
      <pathelement location="${jboss.server.lib}/jbosssx.jar"/>
    </path>
    
    <!-- The combined compile classpath -->
    <path id="javac.classpath">
      <path refid="library.classpath"/>
      <path refid="jbossws.client.classpath"/>
      <pathelement location="${jboss.lib}/jboss-system.jar"/>
      <pathelement location="${jboss.server.lib}/jboss.jar"/>
      <pathelement location="${jboss.server.deploy}/ejb3.deployer/jboss-annotations-ejb3.jar"/>
      <pathelement location="${jboss.server.deploy}/ejb3.deployer/jboss-ejb3x.jar"/>
      <pathelement location="${build.lib.dir}/jbossws-jboss50-integration.jar"/>
      <pathelement location="${build.lib.dir}/jbossws-tomcat-integration.jar"/>
    </path>
    
    <!--
    The test client classpath which does not include the library classpath
    The idea is that we test agains the jar versions in the target container
    -->
    <path id="test.client.classpath">
      <path refid="jbossws.client.classpath"/>
      <pathelement location="${build.lib.dir}/jbossws-jboss50-integration.jar"/>
      <pathelement location="${build.lib.dir}/jbossws-tomcat-integration.jar"/>
      <pathelement location="${jboss.client}/jboss-aspect-jdk50-client.jar"/>
      <pathelement location="${jboss.client}/jboss-aop-jdk50-client.jar"/>
      <pathelement location="${jboss.client}/jboss-ejb3-client.jar"/>
      <pathelement location="${jboss.lib}/jboss-system.jar"/>
      <pathelement location="${jboss.server.lib}/jboss.jar"/>
      <pathelement location="${thirdparty.dir}/hibernate3.jar"/>
      <pathelement location="${thirdparty.dir}/policy-1.0.jar"/>
      <pathelement location="${thirdparty.dir}/qdox.jar"/>
      <pathelement location="${thirdparty.dir}/servlet-api.jar"/>
      <pathelement location="${thirdparty.dir}/stax-api-1.0.jar"/>
      <pathelement location="${thirdparty.dir}/wstx-lgpl-2.9.3.jar"/>
      <pathelement location="${thirdparty.dir}/xmlunit1.0.jar"/>
    </path>
  </target>
  
  <!-- ================================================================== -->
  <!-- Compiling                                                          -->
  <!-- ================================================================== -->
  
  <target name="compile" depends="compile14, compile15" description="Compile sources"/>
  
  <target name="compile14" depends="init" unless="HAVE_JDK_1.5">
    <mkdir dir="${build.tests.dir}/classes"/>
    <javac destdir="${build.tests.dir}/classes" debug="${javac.debug}" encoding="utf-8" verbose="${javac.verbose}" deprecation="${javac.deprecation}" failonerror="${javac.fail.onerror}">
      <src path="${test.java.dir}"/>
      <exclude name="org/jboss/test/ws/interop/**"/>
      <exclude name="org/jboss/test/ws/jaxrpc/jbws718/**"/>
      <exclude name="org/jboss/test/ws/jaxws/**"/>
      <exclude name="org/jboss/test/ws/tools/jsr181/**"/>
      <classpath refid="javac.classpath"/>
    </javac>
  </target>
  
  <target name="compile15" depends="init" if="HAVE_JDK_1.5">
    <mkdir dir="${build.tests.dir}/classes"/>
    <javac destdir="${build.tests.dir}/classes" debug="${javac.debug}" encoding="utf-8" verbose="${javac.verbose}" deprecation="${javac.deprecation}" failonerror="${javac.fail.onerror}">
      <src path="${test.java.dir}"/>
      <exclude name="org/jboss/test/ws/interop/**"/>
      <exclude name="org/jboss/test/ws/jaxrpc/jbws718/**"/>
      <classpath refid="javac.classpath"/>
    </javac>
  </target>
  
  <target name="compile-generated" depends="init" description="Compile generated sources">
    <mkdir dir="${build.tests.dir}/classes"/>
    <javac destdir="${build.tests.dir}/classes" debug="${javac.debug}" encoding="utf-8" verbose="${javac.verbose}" deprecation="${javac.deprecation}" failonerror="${javac.fail.onerror}">
      <src path="${build.tests.dir}/wstools/java"/>
      <exclude name="org/jboss/test/ws/interop/**"/>
      <classpath refid="javac.classpath"/>
    </javac>
  </target>
  
  <target name="copy-resources" depends="init" description="Copy the deployment resources.">
    <copy todir="${build.tests.dir}/classes" file="${test.etc.dir}/jndi.properties"/>
    <copy todir="${build.tests.dir}/classes" file="${test.etc.dir}/log4j.xml"/>
    <!-- Copy resources -->
    <copy todir="${build.tests.dir}/resources">
      <fileset dir="${test.resources.dir}">
        <include name="**/*.wsdl"/>
        <include name="**/*.xml"/>
        <exclude name="jaxrpc/samples-override/**"/>
      </fileset>
      <filterset>
        <filter token="jbosstest.host.name" value="${node0}"/>
        <filter token="wsdl-publish-location" value="${build.tests.dir}/wsdl-publish"/>
      </filterset>
    </copy>
    <!-- Copy binary files -->
    <copy todir="${build.tests.dir}/resources">
      <fileset dir="${test.resources.dir}">
        <exclude name="**/*.wsdl"/>
        <exclude name="**/*.xml"/>
      </fileset>
    </copy>
  </target>
  
  <!-- ================================================================== -->
  <!-- Building                                                           -->
  <!-- ================================================================== -->
  
  <target name="main" depends="compile,copy-resources,generate-sources,compile-generated,copy-generated" description="Build the deployments.">
    <mkdir dir="${build.tests.dir}/reports"/>
    <mkdir dir="${build.tests.dir}/libs"/>
    <ant antfile="${test.dir}/ant/build-jars-jaxrpc.xml" target="build-jars" inheritall="true"/>
    <ant antfile="${test.dir}/ant/build-jars-jaxws.xml" target="build-jars" inheritall="true"/>
  </target>
  
  <!--
  Generate samples sources
  -->
  <target name="generate-sources" depends="compile" description="Generate the deployment resources.">
    <taskdef name="wstools" classname="org.jboss.ws.tools.ant.wstools">
      <classpath refid="jbossws.client.classpath"/>
      <classpath location="${build.tests.dir}/classes"/>
      <classpath location="${build.tests.dir}"/>
    </taskdef>
    <mkdir dir="${build.tests.dir}/wstools/java"/>
    <wstools dest="${build.tests.dir}/wstools/resources/jaxrpc/jbws718/WEB-INF" config="${test.resources.dir}/jaxrpc/jbws718/wstools-config.xml"/>
    <wstools dest="${build.tests.dir}/wstools/resources/jaxrpc/samples/docstyle/wrapped/WEB-INF" config="${test.resources.dir}/jaxrpc/samples/docstyle/wrapped/wstools-config.xml"/>
    <wstools dest="${build.tests.dir}/wstools/resources/jaxrpc/samples/docstyle/bare/WEB-INF" config="${test.resources.dir}/jaxrpc/samples/docstyle/bare/wstools-config.xml"/>
    <wstools dest="${build.tests.dir}/wstools/resources/jaxrpc/samples/dynamichandler/WEB-INF" config="${test.resources.dir}/jaxrpc/samples/dynamichandler/wstools-config.xml"/>
    <wstools dest="${build.tests.dir}/wstools/resources/jaxrpc/samples/exception/WEB-INF" config="${test.resources.dir}/jaxrpc/samples/exception/wstools-config.xml"/>
    <wstools dest="${build.tests.dir}/wstools/resources/jaxrpc/samples/handler/WEB-INF" config="${test.resources.dir}/jaxrpc/samples/handler/wstools-config.xml"/>
    <wstools dest="${build.tests.dir}/wstools/resources/jaxrpc/samples/holder/WEB-INF" config="${test.resources.dir}/jaxrpc/samples/holder/wstools-config.xml"/>
    <wstools dest="${build.tests.dir}/wstools/resources/jaxrpc/samples/jmstransport/META-INF" config="${test.resources.dir}/jaxrpc/samples/jmstransport/wstools-config.xml"/>
    <wstools dest="${build.tests.dir}/wstools/resources/jaxrpc/samples/jsr109ejb/doclit/META-INF" config="${test.resources.dir}/jaxrpc/samples/jsr109ejb/doclit/wstools-config.xml"/>
    <wstools dest="${build.tests.dir}/wstools/resources/jaxrpc/samples/jsr109ejb/rpclit/META-INF" config="${test.resources.dir}/jaxrpc/samples/jsr109ejb/rpclit/wstools-config.xml"/>
    <wstools dest="${build.tests.dir}/wstools/resources/jaxrpc/samples/jsr109pojo/doclit/WEB-INF" config="${test.resources.dir}/jaxrpc/samples/jsr109pojo/doclit/wstools-config.xml"/>
    <wstools dest="${build.tests.dir}/wstools/resources/jaxrpc/samples/jsr109pojo/rpclit/WEB-INF" config="${test.resources.dir}/jaxrpc/samples/jsr109pojo/rpclit/wstools-config.xml"/>
    <wstools dest="${build.tests.dir}/wstools/resources/jaxrpc/samples/message/WEB-INF" config="${test.resources.dir}/jaxrpc/samples/message/wstools-config.xml"/>
    <wstools dest="${build.tests.dir}/wstools/resources/jaxrpc/samples/oneway/WEB-INF" config="${test.resources.dir}/jaxrpc/samples/oneway/wstools-config.xml"/>
    <wstools dest="${build.tests.dir}/wstools/resources/jaxrpc/samples/rpcstyle/WEB-INF" config="${test.resources.dir}/jaxrpc/samples/rpcstyle/wstools-config.xml"/>
    <wstools dest="${build.tests.dir}/wstools/resources/jaxrpc/samples/secureejb/META-INF" config="${test.resources.dir}/jaxrpc/samples/secureejb/wstools-config.xml"/>
    <wstools dest="${build.tests.dir}/wstools/resources/jaxrpc/samples/wssecurity/WEB-INF" config="${test.resources.dir}/jaxrpc/samples/wssecurity/wstools-config.xml"/>
    <wstools dest="${build.tests.dir}/wstools/resources/jaxws/samples/jsr181ejb/META-INF" config="${test.resources.dir}/jaxws/samples/jsr181ejb/wstools-config.xml"/>
    <wstools dest="${build.tests.dir}/wstools/resources/jaxws/samples/jsr181pojo/META-INF" config="${test.resources.dir}/jaxws/samples/jsr181pojo/wstools-config.xml"/>
    <wstools dest="${build.tests.dir}/wstools/resources/jaxws/samples/jsr181pojo/docwrapped/META-INF" config="${test.resources.dir}/jaxws/samples/jsr181pojo/docwrapped/wstools-config.xml"/>
    <wstools dest="${build.tests.dir}/wstools/resources/jaxws/samples/wsaddressing/META-INF" config="${test.resources.dir}/jaxws/samples/wsaddressing/wstools-config.xml"/>
    <move todir="${build.tests.dir}/wstools/java">
      <fileset dir="${build.tests.dir}/wstools/resources/jaxrpc/jbws718/WEB-INF" includes="org/**"/>
      <fileset dir="${build.tests.dir}/wstools/resources/jaxrpc/samples/docstyle/wrapped/WEB-INF" includes="org/**"/>
    </move>
  </target>
  
  <target name="copy-generated" depends="init" description="Copy the deployment resources.">
    <!-- Copy generated resources -->
    <copy todir="${build.tests.dir}/resources">
      <fileset dir="${build.tests.dir}/wstools/resources">
        <include name="**/*.wsdl"/>
        <include name="**/*.xml"/>
      </fileset>
    </copy>
    <!-- Copy resources that cannot (yet) be generated -->
    <copy todir="${build.tests.dir}/resources/jaxrpc/samples" overwrite="true">
      <fileset dir="${test.resources.dir}/jaxrpc/samples-override"/>
      <filterset>
        <filter token="jbosstest.host.name" value="${node0}"/>
      </filterset>
    </copy>
  </target>
  
  <!-- Custom targets that are not needed very often -->
  
  <target name="build-benchmark" depends="main">
    <ant antfile="src/test/ant/build-benchmark-jars.xml" target="build-benchmark-jars" inheritall="true"/>
  </target>
  
  <!-- ================================================================== -->
  <!-- Testing                                                            -->
  <!-- ================================================================== -->
  
  <!-- Run all unit tests and generate a report -->
  <target name="tests" depends="main" description="Run all unit tests and generate a report">
    <antcall target="tests-main">
      <param name="include.wildcard" value="org/jboss/test/ws/**/*TestCase.class"/>
      <param name="exclude.wildcard" value="org/jboss/test/ws/*/benchmark/**"/>
      <param name="excludesfile" value="${test.resources.dir}/tests-no-excludes.txt"/>
    </antcall>
    <antcall target="tests-report"/>
  </target>
  
  <!-- Run benchmark test cases -->
  <target name="tests-benchmark" description="Run benchmark unit tests">
    <antcall target="tests-main">
      <param name="include.wildcard" value="org/jboss/test/ws/benchmark/**/*TestCase.class"/>
      <param name="excludesfile" value="${test.resources.dir}/tests-no-excludes.txt"/>
    </antcall>
    <antcall target="tests-report"/>
  </target>
  
  <!-- Run samples test cases -->
  <target name="tests-samples" depends="init" description="Run samples unit tests">
    <antcall target="tests-main">
      <param name="include.wildcard" value="org/jboss/test/ws/*/samples/**/*TestCase.class"/>
      <param name="excludesfile" value="${tests.excludesfile}"/>
    </antcall>
    <antcall target="tests-report"/>
  </target>
  
  <!-- Run tools test cases -->
  <target name="tests-tools" description="Run tools unit tests">
    <antcall target="tests-main">
      <param name="include.wildcard" value="org/jboss/test/ws/tools/**/*TestCase.class"/>
      <param name="excludesfile" value="${test.resources.dir}/tests-no-excludes.txt"/>
    </antcall>
    <antcall target="tests-report"/>
  </target>
  
  <!--
  Run a collection of unit tests.
  ant -Dtest=tools test
  -->
  <target name="test" if="test" description="Run all unit tests in a given directory">
    <antcall target="tests-main">
      <param name="include.wildcard" value="org/jboss/test/ws/${test}/**/*TestCase.class"/>
      <param name="excludesfile" value="${test.resources.dir}/tests-no-excludes.txt"/>
    </antcall>
  </target>
  
  <!-- Common test target -->
  <target name="tests-main" depends="init">
    <junit printsummary="yes" showoutput="yes" dir="${build.tests.dir}">
      <jvmarg value="-Djava.security.manager"/>
      <sysproperty key="java.security.policy" value="${test.etc.dir}/tst.policy"/>
      <sysproperty key="jboss.home" value="${jboss.home}"/>
      <sysproperty key="tomcat.home" value="${tomcat.home}"/>
      <sysproperty key="jbosstest.host.name" value="${node0}"/>
      <sysproperty key="java.naming.provider.url" value="${node0.jndi.url}"/>
      <sysproperty key="build.testlog" value="${build.tests.dir}/log"/>
      <sysproperty key="java.endorsed.dirs" value="${jboss.home}/lib/endorsed"/>
      <sysproperty key="jbosstest.server.host" value="${node0}"/>
      <sysproperty key="jbossws.target.server" value="${jbossws.target.server}"/>
      <sysproperty key="tomcat.manager.username" value="${tomcat.manager.username}"/>
      <sysproperty key="tomcat.manager.password" value="${tomcat.manager.password}"/>
      <sysproperty key="org.jboss.ws.wsse.keyStore" value="${test.resources.dir}/jaxrpc/wsse/wsse.keystore"/>
      <sysproperty key="org.jboss.ws.wsse.trustStore" value="${test.resources.dir}/jaxrpc/wsse/wsse.truststore"/>
      <sysproperty key="org.jboss.ws.wsse.keyStorePassword" value="jbossws"/>
      <sysproperty key="org.jboss.ws.wsse.trustStorePassword" value="jbossws"/>
      <sysproperty key="org.jboss.ws.wsse.keyStoreType" value="jks"/>
      <sysproperty key="org.jboss.ws.wsse.trustStoreType" value="jks"/>
      <sysproperty key="client.scenario" value="${client.scenario}"/>
      <classpath>
        <path refid="test.client.classpath"/>
        <pathelement location="${build.tests.dir}/classes"/>
      </classpath>
      <formatter type="plain" usefile="true"/>
      <formatter type="xml" usefile="true"/>
      <batchtest todir="${build.tests.dir}/reports" fork="true">
        <fileset dir="${build.tests.dir}/classes" includes="${include.wildcard}" excludes="${exclude.wildcard}" excludesfile="${excludesfile}"/>
      </batchtest>
    </junit>
  </target>
  
  <!--
  Run a single unit test.
  ant -Dtest=org.jboss.test.ws.jaxrpc.samples.jsr109pojo.RpcJSETestCase one-test
  -->
  <target name="one-test" depends="init" if="test" description="Run a single unit test">
    <junit printsummary="yes" showoutput="yes" dir="${build.tests.dir}">
      <jvmarg line="${remote.debug.line}"/>
      <jvmarg value="-Djava.security.manager"/>
      <sysproperty key="java.security.policy" value="${test.etc.dir}/tst.policy"/>
      <sysproperty key="jboss.home" value="${jboss.home}"/>
      <sysproperty key="tomcat.home" value="${tomcat.home}"/>
      <sysproperty key="jbosstest.host.name" value="${node0}"/>
      <sysproperty key="java.naming.provider.url" value="${node0.jndi.url}"/>
      <sysproperty key="build.testlog" value="${build.tests.dir}/log"/>
      <sysproperty key="java.endorsed.dirs" value="${jboss.home}/lib/endorsed"/>
      <sysproperty key="jbosstest.server.host" value="${node0}"/>
      <sysproperty key="jbossws.target.server" value="${jbossws.target.server}"/>
      <sysproperty key="tomcat.manager.username" value="${tomcat.manager.username}"/>
      <sysproperty key="tomcat.manager.password" value="${tomcat.manager.password}"/>
      <sysproperty key="client.scenario" value="${client.scenario}"/>
      <!--
      http://jira.jboss.com/jira/browse/JBWS-917
      <sysproperty key="javax.net.ssl.keyStore" value="${test.resources.dir}/jaxrpc/wsse/wsse.keystore"/>
      <sysproperty key="javax.net.ssl.trustStore" value="${test.resources.dir}/jaxrpc/wsse/wsse.truststore"/>
      <sysproperty key="javax.net.ssl.keyStorePassword" value="jbossws"/>
      <sysproperty key="javax.net.ssl.trustStorePassword" value="jbossws"/>
      <sysproperty key="javax.net.ssl.keyStoreType" value="jks"/>
      <sysproperty key="javax.net.ssl.trustStoreType" value="jks"/>
      -->
      <!-- HTTPS hostname wrong:  should be <localhost> -->
      <sysproperty key="org.jboss.security.ignoreHttpsHost" value="true"/>
      <sysproperty key="org.jboss.ws.wsse.keyStore" value="${test.resources.dir}/jaxrpc/wsse/wsse.keystore"/>
      <sysproperty key="org.jboss.ws.wsse.trustStore" value="${test.resources.dir}/jaxrpc/wsse/wsse.truststore"/>
      <sysproperty key="org.jboss.ws.wsse.keyStorePassword" value="jbossws"/>
      <sysproperty key="org.jboss.ws.wsse.trustStorePassword" value="jbossws"/>
      <sysproperty key="org.jboss.ws.wsse.keyStoreType" value="jks"/>
      <sysproperty key="org.jboss.ws.wsse.trustStoreType" value="jks"/>
      <classpath>
        <path refid="test.client.classpath"/>
        <pathelement location="${build.tests.dir}/classes"/>
      </classpath>
      <formatter type="plain" usefile="true"/>
      <formatter type="xml" usefile="true"/>
      <test todir="${build.tests.dir}/reports" name="${test}" fork="true"/>
    </junit>
  </target>
  
  <!-- ================================================================== -->
  <!-- Reporting                                                          -->
  <!-- ================================================================== -->
  
  <!-- Build the tests report -->
  <target name="tests-report" depends="init" description="Build the tests report">
    <junitreport todir="${build.tests.dir}/reports">
      <fileset dir="${build.tests.dir}/reports">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${build.tests.dir}/reports/html"/>
    </junitreport>
    <zip destfile="${build.tests.dir}/test-report-${build.id}.zip">
      <fileset dir="${build.tests.dir}" includes="reports/**"/>
    </zip>
  </target>
  
  <!-- ================================================================== -->
  <!-- Cleaning                                                           -->
  <!-- ================================================================== -->
  
  <target name="clean" description="Delete all generated test files.">
    <delete dir="${build.tests.dir}"/>
  </target>
  
</project>
