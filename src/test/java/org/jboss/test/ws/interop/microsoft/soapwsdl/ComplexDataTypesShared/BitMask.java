// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3

package org.jboss.test.ws.interop.microsoft.soapwsdl.ComplexDataTypesShared;


import java.util.Map;
import java.util.HashMap;

public class BitMask {
    private java.lang.String value;
    private static java.util.Map valueMap = new HashMap();
    public static final java.lang.String _BitOneString = "BitOne";
    public static final java.lang.String _BitTwoString = "BitTwo";
    public static final java.lang.String _BitThreeString = "BitThree";
    public static final java.lang.String _BitFourString = "BitFour";
    public static final java.lang.String _BitFiveString = "BitFive";
    
    public static final java.lang.String _BitOne = new java.lang.String(_BitOneString);
    public static final java.lang.String _BitTwo = new java.lang.String(_BitTwoString);
    public static final java.lang.String _BitThree = new java.lang.String(_BitThreeString);
    public static final java.lang.String _BitFour = new java.lang.String(_BitFourString);
    public static final java.lang.String _BitFive = new java.lang.String(_BitFiveString);
    
    public static final BitMask BitOne = new BitMask(_BitOne);
    public static final BitMask BitTwo = new BitMask(_BitTwo);
    public static final BitMask BitThree = new BitMask(_BitThree);
    public static final BitMask BitFour = new BitMask(_BitFour);
    public static final BitMask BitFive = new BitMask(_BitFive);
    
    protected BitMask(java.lang.String value) {
        this.value = value;
        valueMap.put(this.toString(), this);
    }
    
    public java.lang.String getValue() {
        return value;
    }
    
    public static BitMask fromValue(java.lang.String value)
        throws java.lang.IllegalStateException {
        if (BitOne.value.equals(value)) {
            return BitOne;
        } else if (BitTwo.value.equals(value)) {
            return BitTwo;
        } else if (BitThree.value.equals(value)) {
            return BitThree;
        } else if (BitFour.value.equals(value)) {
            return BitFour;
        } else if (BitFive.value.equals(value)) {
            return BitFive;
        }
        throw new java.lang.IllegalArgumentException();
    }
    
    public static BitMask fromString(java.lang.String value)
        throws java.lang.IllegalStateException {
        BitMask ret = (BitMask)valueMap.get(value);
        if (ret != null) {
            return ret;
        }
        if (value.equals(_BitOneString)) {
            return BitOne;
        } else if (value.equals(_BitTwoString)) {
            return BitTwo;
        } else if (value.equals(_BitThreeString)) {
            return BitThree;
        } else if (value.equals(_BitFourString)) {
            return BitFour;
        } else if (value.equals(_BitFiveString)) {
            return BitFive;
        }
        throw new IllegalArgumentException();
    }
    
    public java.lang.String toString() {
        return value.toString();
    }
    
    private java.lang.Object readResolve()
        throws java.io.ObjectStreamException {
        return fromValue(getValue());
    }
    
    public boolean equals(java.lang.Object obj) {
        if (!(obj instanceof BitMask)) {
            return false;
        }
        return ((BitMask)obj).value.equals(value);
    }
    
    public int hashCode() {
        return value.hashCode();
    }
}
