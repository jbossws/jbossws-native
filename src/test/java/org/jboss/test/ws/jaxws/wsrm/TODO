Priority | Task
--------------------------------------------------------------------------------
MUST	 | Server can send AckRequested, CloseSequence or TerminateSequence
         | asynchronously any time. RMSender must count with that and thus
     	 | register a callback handler that will listen for these messages.
         | Once such message arrives (applies to backports only), it will
         | call sequence registry and notifies the sequence that there's a 
         | message for it in the RMTransport. SequenceManager in next iteration
         | will detect that sequence is in the special state and initiates
         | dummy method call (dummy method call is the call that will not go
         | to the wire and will not be executed through the outbound handler
         | chain. When such dummy method call will arrive to the RMTransport,
         | RMSender will return it the arrived AckRequested, CloseSequence or
         | TerminateSequence message, this message will be executed throught
         | inbound message handlers (WS-Security will be executed properly)
         | and sequence state will change (e.g. when AckRequested message will
         | arrive for req/res message exchange pattern, then sequence state will
         | change to SequenceAcknowledgement requested). SequenceManager
         | in later iteration will detect this new state and will send sequence
         | acknowledgement message to the server (or CloseSequenceResponse)
--------------------------------------------------------------------------------
MUST     | Create the test for above use-cases (AckRequested, Close(Terminate)S
--------------------------------------------------------------------------------
MUST     | Implement one way method call in the same way as above investigation.
--------------------------------------------------------------------------------
MUST     | Users must be able to specify in sequence creation code whether
         | reliable sequence is simplex (for one way messages only) or duplex
         | (req-res message exchange pattern) - default will be duplex
--------------------------------------------------------------------------------
MUST     | Users must be able to specify wether client is anonymous or 
         | addressable - default will be addressable
--------------------------------------------------------------------------------